filename,code
samples_couchvse_libs_functions.txt,"%REM 
    CouchUtils.vss 
    
%END REM 

Option Public
Option Declare
UseVSE ""*CouchVSE""

Const SERVER_URL = """"
Const USERNAME = """"
Const PASSWORD = """"

%REM 
    Function loginCouchDbServer 

    Logs into a Couch Server

    @param server CouchServer instance to which to login 
    @param user UserID to be used for the login 
    @param password Password used to login 
    @param url URL Used to identify location of sever 
    @param certificatepath Certificate path of a non-standard CRT certificate used for the server (unused if blank)

    @return Flag indicating success / failure of the login attempt 
%END REM 
Function loginCouchDbServer(server As CouchServer, user As String, password As String, url As String, certificatepath As String) As Boolean 
    
    Set server = new CouchServer() 

	If url = """" Then
		Print ""Set variables for CouchDB server""
		Return
	End If

    server.User = user
    server.Password = password 
    server.URL = url

    If (Len(FullTrim(certificatepath)) > 0) Then
        'Only set certificate path if not blank
        server.CertificatePath = certificatepath
    End If

    Call server.Login()

    return True 
End Function

%REM
    Print total number of features and list them,
    converted from an array to a string
%END REM
Function getCouchDbFeatures(server As CouchServer) As Variant 
    Dim result As Variant 
    Dim i As Integer 

    result = server.Features

    If IsArray(result) Then i = Ubound(result) + 1
    Print ""There are "" & i & "" Features: "", join(result, |, |)

    Return result 
End Function

%REM
    Print total number of databases and list them, converting array to string
%END REM
Function getCouchDbDatabaseNames(server As CouchServer) As Variant 
    Dim result As Variant 
    Dim i As Integer 

    result = server.DatabaseNames

    If IsArray(result) Then i = Ubound(result) + 1
    Print ""There are "" & i & "" DatabaseNames: "", join(result, |, |)

    Return result 
End Function

%REM
    Get or create a database
%END REM
Function getOrCreateCouchDbDatabase(server As CouchServer, dbName As String) As CouchDatabase 
    If server.IsDatabase(dbName) Then
        return server.GetDb(dbName)
    Else
        Return server.CreateDb(dbName)
    End If
End Function

%REM
    Print all documents IDs
%END REM
Sub PrintCouchDbDocumentIDs(source As CouchDatabase) 
    Dim elements As Variant 
    Dim i As Integer

    If (source Is Nothing) Then Return 

    Print |Getting DocumentIDs from | & source.Name 
    elements = source.DocumentIDs 

    Print |Retrieved the DocumentIDs|

    If IsArray(elements) Then i = Ubound(elements) + 1
    Print ""There are "" & i & "" Documents: "", join(elements, |, |) 
End Sub

%REM
    Creates a document in a specific CouchDB database
%END REM
Function createDocument(db as CouchDatabase) as CouchDocument
    
    Dim doc as CouchDocument

    Set doc = db.createDocument("""", |{""firstName"":""John"",""lastName"":""Doe"",""email"":""jdoe@acme.com""}|)
    Call doc.save()
    Return doc

End Function

%REM
    Prints metadata info about a CouchDocument
%END REM
Sub PrintCouchDocumentInfo(document as CouchDocument)

    Dim attachment as CouchAttachment

    Print |document.DesignType: | & document.DesignType
    Print |document.ID: | & document.ID
    Print |document.isModified: | & document.isModified
    Print |document.isSaved: | & document.isSaved
    Print |document.JSONValue: | & document.JSONValue
    Print |document.Revision: | & document.Revision
    Print |document.URL: | & document.URL
    ForAll attachName in document.Attachments
        If (attachName != """") Then
            Set attachment = document.getAttachmentInfo(attachName)
            Print |attachment.Name: | & attachment.Name 
            Print |attachment.ContentLength: | & attachment.ContentLength 
            Print |attachment.ContentType: | & attachment.ContentType
        End If
    End ForAll

End Sub

%REM
    Gets a document, checking if it exists first
%END REM
Function getDocument(db as CouchDatabase, id as String) as CouchDocument
    
    If db.isDocument(ID) Then Return db.GetDocumentByID(ID)

End Function

%REM
    Updates a document
%END REM
Function updateDocument(db as CouchDatabase, id as String) as CouchDocument

    Dim doc as CouchDocument
    If db.isDocument(ID) Then
        Set doc = db.GetDocumentByID(ID)
        Call doc.addItem(""Pet"", ""Squirrel"")
        Call doc.addItemToJsonObject(""Name"", ""Color"", ""Blue"")
        Call doc.addItemToJsonObject(""HexCode"", ""Color"", ""0000FF"")
        Call doc.save()
        Return doc
    End If

End Function

%REM
    Deletes a document from the database, removing all items from the document
%END REM
Function deleteDocument(db as CouchDatabase, id as String) as Boolean

    If db.isDocument(ID) Then
        Return db.deleteDocumentByID(ID, False)
    End If

End Function

%REM
    Gets a JSON object corresponding to the first two documents in a view called ""names""
%END REM
Function getEntriesFromView(db as CouchDatabase) as String

    Dim view as CouchView

    Set view = db.getViewByID(""names"")
    Print view.getSomeRows(0, 2)

End Function

%REM
    Adds an attachment and reacquires the CouchDocument to update fields
%END REM
Sub addAttachment(db as CouchDatabase, doc as CouchDocument, filePath as String)
    Dim attach as CouchAttachment
    Set attach = doc.createAttachment(""attach"", filePath, ""text/plain"")
    Call attach.upload

    ' Need to re-acquire document to update CouchDocument fields
    Set doc = db.GetDocumentByID(doc.ID, False)
End Sub

%REM
    Downloads an attachment to a path
%END REM
Sub downloadAttachment(doc as CouchDocument, attachName as String, filePath as String)

    Dim attach as CouchAttachment
    Set attach = doc.getAttachmentInfo(attachName)
    Call attach.download(filePath, True)
    Call attach.upload

End Sub"
samples_couchvse_src_createDocument.txt,"Option Public
Option Declare

Use ""../libs/functions""

Sub Initialize

	Dim server As CouchServer
    Dim db as CouchDatabase
    Dim loginResult as Boolean
    Dim doc as CouchDocument

	loginResult = loginCouchDbServer(server, USERNAME, PASSWORD, SERVER_URL, """")
	If Not loginResult Then Return

	Set db = getOrCreateCouchDbDatabase(server, ""demo"")
    Set doc = db.createDocument("""", |{""firstName"":""John"",""lastName"":""Doe"",""email"":""jdoe@acme.com""}|)
    Call doc.save()

    Call PrintCouchDocumentInfo(doc)

End Sub"
samples_couchvse_src_createDocumentAndAttachmentPlusDownload.txt,"Option Public
Option Declare

Use ""../libs/functions""

Sub Initialize

	Dim server As CouchServer
    Dim db as CouchDatabase
    Dim loginResult as Boolean
    Dim doc as CouchDocument
    Dim attach as CouchAttachment
    Dim fileName as String

	loginResult = loginCouchDbServer(server, USERNAME, PASSWORD, SERVER_URL, """")
	If Not loginResult Then Return

	Set db = getOrCreateCouchDbDatabase(server, ""demo"")
    Set doc = db.createDocument("""", |{""firstName"":""John"",""lastName"":""Doe"",""email"":""jdoe@acme.com""}|)
    Call doc.save()

    fileName = ""createDocumentAndAttachmentPlusDownload.vss""
    Set attach = doc.createAttachment(fileName,_
        CurDir & ""/src/"" & fileName, ""text/plain"")
    Call attach.upload

    ' Need to re-acquire document to update CouchDocument fields
    Set doc = db.GetDocumentByID(doc.ID, False)

    Set attach = doc.getAttachmentInfo(fileName)
    Call attach.download(CurDir & ""/temp.txt"", True)

    Call PrintCouchDocumentInfo(doc)

End Sub"
samples_couchvse_src_deleteDocument.txt,"Option Public
Option Declare

Use ""../libs/functions""

Const ID = ""foo""

Sub Initialize

	Dim server As CouchServer
    Dim db as CouchDatabase
    Dim loginResult as Boolean
    Dim doc as CouchDocument

	loginResult = loginCouchDbServer(server, USERNAME, PASSWORD, SERVER_URL, """")
	If Not loginResult Then Return

	Set db = getOrCreateCouchDbDatabase(server, ""demo"")
    If db.isDocument(ID) Then
        Print db.deleteDocumentByID(ID, False)
    End If

End Sub"
samples_couchvse_src_getDocument.txt,"Option Public
Option Declare

Use ""../libs/functions""

Const ID = """"

Sub Initialize

	Dim server As CouchServer
    Dim db as CouchDatabase
    Dim loginResult as Boolean
    Dim doc as CouchDocument

	loginResult = loginCouchDbServer(server, USERNAME, PASSWORD, SERVER_URL, """")
	If Not loginResult Then Return

	Set db = getOrCreateCouchDbDatabase(server, ""demo"")
    If db.isDocument(ID) Then
        Set doc = db.GetDocumentByID(ID, True)
        Call PrintCouchDocumentInfo(doc)
    End If

End Sub"
samples_couchvse_src_getServerAndDbInfo.txt,"Option Declare
Option Public

Use ""../libs/functions.vss""

Sub Initialize
	Dim server As CouchServer
	Dim db As CouchDatabase
    Dim loginResult as Boolean

	loginResult = loginCouchDbServer(server, USERNAME, PASSWORD, SERVER_URL, """")
	If Not loginResult Then Return

    Print ""Login server: "" & loginResult
    Print ""CouchServer.CouchVersion: "" & server.CouchVersion
	Print ""CouchServer UUID: "" & server.getUUID()

	Call getCouchDbFeatures(server)
	Call getCouchDbDatabaseNames(server)
	Set db = getOrCreateCouchDbDatabase(server, ""demo"")

	Call PrintCouchDbDocumentIDs(db)

End Sub"
samples_couchvse_src_getView.txt,"Option Public
Option Declare

Use ""../libs/functions""

%REM
    Assumes a view with the ID ""names"", wth mapFunction
function (doc) {
  emit(doc._id, {""firstName"": doc.firstName, ""lastName"": doc.lastName});
}
%END REM

Sub Initialize

	Dim server As CouchServer
    Dim db as CouchDatabase
    Dim loginResult as Boolean
    Dim view as CouchView

	loginResult = loginCouchDbServer(server, USERNAME, PASSWORD, SERVER_URL, """")
	If Not loginResult Then Return

	Set db = getOrCreateCouchDbDatabase(server, ""demo"")
    Set view = db.getViewByID(""names"")
    Print view.getSomeRows(0, 2)

End Sub"
samples_couchvse_src_updateDocument.txt,"Option Public
Option Declare

Use ""../libs/functions""

Const ID = """"

Sub Initialize

	Dim server As CouchServer
    Dim db as CouchDatabase
    Dim loginResult as Boolean
    Dim doc as CouchDocument

	loginResult = loginCouchDbServer(server, USERNAME, PASSWORD, SERVER_URL, """")
	If Not loginResult Then Return

	Set db = getOrCreateCouchDbDatabase(server, ""demo"")
    If db.isDocument(ID) Then
        Set doc = db.GetDocumentByID(ID)
        Call doc.addItem(""Pet"", ""Squirrel"")
        Call doc.addItemToJsonObject(""Name"", ""Color"", ""Blue"")
        Call doc.addItemToJsonObject(""HexCode"", ""Color"", ""0000FF"")
        Call doc.save()

        Call PrintCouchDocumentInfo(doc)
    End If

End Sub"
samples_hashvse_libs_constants.txt,"%REM
	Copyright 2023 HCL America, Inc.
	Licensed under the Apache License, Version 2.0 (the ""License"");
	you may not use this file except in compliance with the License.
	You may obtain a copy of the License at

	http://www.apache.org/licenses/LICENSE-2.0

	Unless required by applicable law or agreed to in writing,
	software distributed under the License is distributed on an ""AS IS"" BASIS,
	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	See the License for the specific language governing permissions and limitations under the License
%END REM

Option Declare
Option Public

Const jsonStr = |{
    ""name"": ""web-samples"",
    ""authors"": [
        ""Paul Withers""
    ],
    ""description"": ""HCL VoltScript Web Samples"",
    ""license"": ""Apache 2.0"",
    ""version"": ""1.0.0"",
    ""sourceDir"": ""src"",
    ""libsDir"": ""libs"",
    ""vsesDir"": ""vses"",
    ""testDir"": ""test"",
    ""mainScripts"": [
        ""main.vss""
    ],
    ""dependencies"": [
        {
            ""library"": ""voltscript-testing"",
            ""version"": ""1.1.0"",
            ""module"": ""VoltScriptTesting.vss""
        }
    ],
    ""vseDependencies"": {
        ""HashVSE"": {
            ""library"": ""HashVSE"",
            ""version"": ""1.0.0"",
            ""module"": ""hashvse""
        }
    },
    ""repositories"": [
        {
            ""id"": ""domino"",
            ""type"": ""webserver"",
            ""url"": ""https://domino.sage.fnxlabs.com/VoltScriptRepository.nsf""
        }
    ]
}|

Const base64Str = |ewogICAgIm5hbWUiOiAid2ViLXNhbXBsZXMiLAogICAgImF1dGhvcnMiOiBbCiAgICAgICAgIlBhdWwgV2l0aGVycyIKICAgIF0sCiAgICAiZGVzY3JpcHRpb24iOiAiSENMIFZvbHRTY3JpcHQgV2ViIFNhbXBsZXMiLAogICAgImxpY2Vuc2UiOiAiQXBhY2hlIDIuMCIsCiAgICAidmVyc2lvbiI6ICIxLjAuMCIsCiAgICAic291cmNlRGlyIjogInNyYyIsCiAgICAibGlic0RpciI6ICJsaWJzIiwKICAgICJ2c2VzRGlyIjogInZzZXMiLAogICAgInRlc3REaXIiOiAidGVzdCIsCiAgICAibWFpblNjcmlwdHMiOiBbCiAgICAgICAgIm1haW4udnNzIgogICAgXSwKICAgICJkZXBlbmRlbmNpZXMiOiBbCiAgICAgICAgewogICAgICAgICAgICAibGlicmFyeSI6ICJ2b2x0c2NyaXB0LXRlc3RpbmciLAogICAgICAgICAgICAidmVyc2lvbiI6ICIxLjEuMCIsCiAgICAgICAgICAgICJtb2R1bGUiOiAiVm9sdFNjcmlwdFRlc3RpbmcudnNzIgogICAgICAgIH0KICAgIF0sCiAgICAidnNlRGVwZW5kZW5jaWVzIjogewogICAgICAgICJIYXNoVlNFIjogewogICAgICAgICAgICAibGlicmFyeSI6ICJIYXNoVlNFIiwKICAgICAgICAgICAgInZlcnNpb24iOiAiMS4wLjAiLAogICAgICAgICAgICAibW9kdWxlIjogImhhc2h2c2UiCiAgICAgICAgfQogICAgfSwKICAgICJyZXBvc2l0b3JpZXMiOiBbCiAgICAgICAgewogICAgICAgICAgICAiaWQiOiAiZG9taW5vIiwKICAgICAgICAgICAgInR5cGUiOiAid2Vic2VydmVyIiwKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2RvbWluby5zYWdlLmZueGxhYnMuY29tL1ZvbHRTY3JpcHRSZXBvc2l0b3J5Lm5zZiIKICAgICAgICB9CiAgICBdCn0=|

Const hashStartStr = |Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aliquam nisl risus, rutrum feugiat imperdiet at, varius finibus urna.|"
samples_hashvse_libs_functions.txt,"%REM
	Copyright 2023 HCL America, Inc.
	Licensed under the Apache License, Version 2.0 (the ""License"");
	you may not use this file except in compliance with the License.
	You may obtain a copy of the License at

	http://www.apache.org/licenses/LICENSE-2.0

	Unless required by applicable law or agreed to in writing,
	software distributed under the License is distributed on an ""AS IS"" BASIS,
	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	See the License for the specific language governing permissions and limitations under the License
%END REM

Option Declare
Option Public

UseVSE ""*HashVSE""
Use ""../libs/constants""

%REM
    Converts a string to a byte array
%END REM
Function convertStringToBytes(passedStr as String) as Variant
    Dim hu as New HashUtilities()
    Return hu.stringToBytes(passedStr)
End Function

%REM
    Converts a byte array to a non-hexadecimal string
%END REM
Function convertBytesToString(tempVal as Variant) as String
    Dim hu as New HashUtilities()
    Return hu.bytesToString(tempVal, False)
End Function

%REM
    Base64 encodes a string
%END REM
Function base64Encode(passedStr as String) as String
    Dim hu as New HashUtilities()
    Return hu.base64Encode(passedStr)
End Function

%REM
    Decodes a base64 string
%END REM
Function base64Decode(base64Str as String) as String
    Dim hu as New HashUtilities()
    Return hu.base64Decode(base64Str)
End Function

%REM
    Base64 encodes a byte array
%END REM
Function base64ByteEncode(tempVal as Variant) as String
    Dim hu as New HashUtilities()
    Return hu.base64EncodeB(tempVal)
End Function

%REM
    Decodes a base64 string to a byte array
%END REM
Function base64ByteDecode(base64Str as String) as Variant
    Dim hu as New HashUtilities()
    Return hu.base64DecodeB(base64Str)
End Function

%REM
    Convert strings to SHA strings
%END REM
Sub convertSHA(inputStr as String, output1 as String, output256 as String,_
    output512 as String)
    Dim hu as New HashUtilities()
    output1 = hu.SHA1(inputStr)
    output256 = hu.SHA256(inputStr)
    output512 = hu.SHA512(inputStr)
End Sub

%REM
    Convert strings to SHA byteArrays
%END REM
Sub convertSHABytes(inputStr as Variant, output1 as Variant, output256 as Variant,_
    output512 as Variant)
    Dim hu as New HashUtilities()
    output1 = hu.SHA1B(inputStr)
    output256 = hu.SHA256B(inputStr)
    output512 = hu.SHA512B(inputStr)
End Sub

%REM
    Converts a string with MD5 hash
%END REM
Function convertMD5(inputStr as String) as String
    Dim hu as New HashUtilities()
    Return hu.MD5(inputStr)
End Function

%REM
    Converts a byte array with MD5 hash
%END REM
Function convertMD5Bytes(inputBytes as Variant) as Variant
    Dim hu as New HashUtilities()
    Return hu.MD5B(inputBytes)
End Function

%REM
    Converts a file's content to a string with MD5 hash
%END REM
Function convertFileMD5() as String
    Dim hu as New HashUtilities()
    Return hu.FileMD5(CurDir & ""/samples/lorem.txt"")
End Function

%REM
    Converts a file's content to a string with MD5 hash
%END REM
Function convertFileMD5Bytes() as Variant
    Dim hu as New HashUtilities()
    Return hu.FileMD5B(CurDir & ""/samples/lorem.txt"")
End Function

%REM
    Populates initialization vector and keys for AES encryption
%END REM
Sub initializeForAES(iv as Variant, key128 as Variant, key256 as Variant)
    Dim cu as New CryptoUtilities()
    iv = cu.createAESIV()
    key128 = cu.createAES128Key()
    key256 = cu.createAES256Key()
End Sub

%REM
    Encrypts a file, receiving either a 128-bit or 256-bit key
%END REM
Function encryptFile(sourceFile as String, targetFile as String, iv as Variant, key as Variant)
    Dim cu as New CryptoUtilities()
    Call cu.fileEncryptAES(sourceFile, targetFile, iv, key, True)
End Function

%REM
    Encrypts a file, receiving either a 128-bit or 256-bit key
%END REM
Function decryptFile(sourceFile as String, targetFile as String, iv as Variant, key as Variant)
    Dim cu as New CryptoUtilities()
    Call cu.fileDecryptAES(sourceFile, targetFile, iv, key, True)
End Function"
samples_hashvse_test_hashTests.txt,"%REM
	Copyright 2023 HCL America, Inc.
	Licensed under the Apache License, Version 2.0 (the ""License"");
	you may not use this file except in compliance with the License.
	You may obtain a copy of the License at

	http://www.apache.org/licenses/LICENSE-2.0

	Unless required by applicable law or agreed to in writing,
	software distributed under the License is distributed on an ""AS IS"" BASIS,
	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	See the License for the specific language governing permissions and limitations under the License
%END REM

Option Declare
Option Public

Use ""../libs/functions.vss""
Use ""../libs/VoltScriptTesting""

Sub Initialize
    Dim TestRunner as New TestRunner(""HashVSE tests"")
    Dim testSuite as New TestSuite(""Hash tests"")
    Dim tempStr as String
    Dim baseByteArr as Variant
    Dim tempByteArr as Variant
    Dim output1 as String
    Dim output256 as String
    Dim output512 as String
    Dim output1B as Variant
    Dim output256B as Variant
    Dim output512B as Variant
    Dim expected as String
    Call testRunner.addTestSuite(testSuite)

    Try
        tempStr = base64Encode(jsonStr)
        Call testSuite.describe(""Test Base64 encoding"").assertEqualsString(base64Str, tempStr, True)
        Call testSuite.describe(""Test Base64 decoding"").assertEqualsString(jsonStr, base64Decode(tempStr), True)

        baseByteArr = convertStringToBytes(jsonStr)
        Call testSuite.describe(""Test string-to-bytes is array"").assertIs(""BYTE( )"", baseByteArr)
        tempStr = base64ByteEncode(baseByteArr)
        Call testSuite.describe(""Test base64 byte encoding"").assertEqualsString(base64Str, tempStr, True)
        tempByteArr = base64ByteDecode(tempStr)
        Call testSuite.describe(""Test base64 byte decoding is array"").assertIs(""BYTE( )"", tempByteArr)
        Call testSuite.describe(""Test base64 round-trip conversion to string"").assertEqualsString(jsonStr,_
            convertBytesToString(tempByteArr), True)

        Call convertSHA(hashStartStr, output1, output256, output512)
        Call testSuite.describe(""Test SHA1 different to SHA256"").assertNotEqualString(output1, output256)
        Call testSuite.describe(""Test SHA256 different to SHA512"").assertNotEqualString(output256, output512)
        tempByteArr = convertStringToBytes(hashStartStr)
        Call convertSHABytes(tempByteArr, output1B, output256B, output512B)
        Dim hu as New HashUtilities()
        Call testSuite.describe(""Test SHA1 and SHA1B"").assertEqualsString(output1,_
            hu.bytesToString(output1B, True), True)
        Call testSuite.describe(""Test SHA256 and SHA256B"").assertEqualsString(output256,_
            hu.bytesToString(output256B, True), True)
        Call testSuite.describe(""Test SHA512 and SHA512B"").assertEqualsString(output512,_
            hu.bytesToString(output512B, True), True)

        expected = ""1069e938d08e97e5e12edac8cde40687""
        Call testSuite.describe(""Convert string to MD5 hash"").assertEqualsString(expected,_
            convertMD5(hashStartStr), True)
        Call testSuite.describe(""Convert string to MD5 hash"").assertEqualsString(expected,_
            hu.bytesToString(convertMD5Bytes(hu.stringToBytes(hashStartStr)), True), True)
        Call testSuite.describe(""Convert string to MD5 hash"").assertEqualsString(expected,_
            convertFileMD5(), True)
        Call testSuite.describe(""Convert string to MD5 hash"").assertEqualsString(expected,_
            hu.bytesToString(convertFileMD5Bytes(), True), True)
    Catch
        Print ""Error "" & Error() & "" on line "" & Erl()
    End Try

    Dim cryptoSuite as New TestSuite(""Crypto Tests"")
    Dim iv as Variant
    Dim key128 as Variant
    Dim key256 as Variant
    Dim basePath as String
    Call testRunner.addTestSuite(cryptoSuite)
    Call initializeForAES(iv, key128, key256)
    Call cryptoSuite.describe(""Check initialization vector is byte array"").assertIs(""BYTE( )"", iv)
    Call cryptoSuite.describe(""Check 128 AES key is byte array"").assertIs(""BYTE( )"", key128)
    Call cryptoSuite.describe(""Check 256 AES key is byte array"").assertIs(""BYTE( )"", key256)
    basePath = CurDir & ""/samples/lorem""
    Call encryptFile(basePath & "".txt"", basePath & ""128.txt"", iv, key128)
    Call encryptFile(basePath & "".txt"", basePath & ""256.txt"", iv, key256)
    Call cryptoSuite.describe(""Check encrypted files are different"")._
        assertNotEqualString(hu.FileMD5(basePath & ""128.txt""), hu.FileMD5(basePath & ""256.txt""))
    Call decryptFile(basePath & ""128.txt"", basePath & ""128out.txt"", iv, key128)
    Call decryptFile(basePath & ""256.txt"", basePath & ""256out.txt"", iv, key256)
    Call cryptoSuite.describe(""Check decrypted files are different"")._
        assertEqualsString(hu.FileMD5(basePath & ""128out.txt""), hu.FileMD5(basePath & ""256out.txt""), True)
End Sub"
samples_input_libs_functions.txt,"%REM
	Copyright 2023 HCL America, Inc.
	Licensed under the Apache License, Version 2.0 (the ""License"");
	you may not use this file except in compliance with the License.
	You may obtain a copy of the License at

	http://www.apache.org/licenses/LICENSE-2.0

	Unless required by applicable law or agreed to in writing,
	software distributed under the License is distributed on an ""AS IS"" BASIS,
	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	See the License for the specific language governing permissions and limitations under the License
%END REM

Option Declare
Option Public

UseVSE ""*StreamVSE""

%REM
	Echoes the user's message until the user entere's ""q"" or ""quit""
%END REM
Sub echoMessagesUntilQuit()
    Dim pipestream as New Stream()
	Dim continue as Boolean
	Dim data as String

	Call pipestream.open("""", ""STDIO"")
	continue = true
	Call pipeStream.writeText(""Enter quit or q to end interaction"", EOL_LF)
	Do While Continue
    	data = pipeStream.readText(true, 4, 5)
		Select Case data
		Case ""quit"", ""q"":
			continue = False
		Case """":
			Call pipeStream.writeText(""I didn't head anything"", EOL_LF)
		Case Else:
			Call pipeStream.writeText(""You entered: "" & data, EOL_LF)
		End Select
	Loop
	Call pipeStream.close()
	Print ""Thank you""
End Sub

%REM
	Echoes the user's message until the user ends the stream (Ctrl + D).
	NOTE: This time we use Print instead of .writeText - Print automatically appends a line feed
%END REM
Sub echoMessagesUntilEOS()
	Dim pipestream as New Stream()
	Dim continue as Boolean
	Dim data as String

	Call pipestream.open("""", ""STDIO"")
	Print ""Press Ctrl + D to end interaction""
	Do While Not pipeStream.isEOS
		data = pipeStream.readText(true, 4, 5)
		Select Case data
		Case """":
			Print ""I didn't head anything""
		Case Else:
			Print ""You entered: "" & data
		End Select
	Loop
	Call pipeStream.close()
	Print ""Thank you""
End Sub"
samples_input_src_echoContext.txt,"%REM
	Copyright 2023 HCL America, Inc.
	Licensed under the Apache License, Version 2.0 (the ""License"");
	you may not use this file except in compliance with the License.
	You may obtain a copy of the License at

	http://www.apache.org/licenses/LICENSE-2.0

	Unless required by applicable law or agreed to in writing,
	software distributed under the License is distributed on an ""AS IS"" BASIS,
	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	See the License for the specific language governing permissions and limitations under the License
%END REM

Option Declare
Option Public

UseVSE ""*ContextVSE""

Sub Initialize

    Dim ctx as New Context()
    Print ""Received contextual string: "" & ctx.Context

End Sub"
samples_input_src_echoEOS.txt,"%REM
	Copyright 2023 HCL America, Inc.
	Licensed under the Apache License, Version 2.0 (the ""License"");
	you may not use this file except in compliance with the License.
	You may obtain a copy of the License at

	http://www.apache.org/licenses/LICENSE-2.0

	Unless required by applicable law or agreed to in writing,
	software distributed under the License is distributed on an ""AS IS"" BASIS,
	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	See the License for the specific language governing permissions and limitations under the License
%END REM

Option Declare
Option Public
Use ""../libs/functions""

Sub Initialize
    Call echoMessagesUntilEOS()
End Sub"
samples_input_src_echoQ.txt,"%REM
	Copyright 2023 HCL America, Inc.
	Licensed under the Apache License, Version 2.0 (the ""License"");
	you may not use this file except in compliance with the License.
	You may obtain a copy of the License at

	http://www.apache.org/licenses/LICENSE-2.0

	Unless required by applicable law or agreed to in writing,
	software distributed under the License is distributed on an ""AS IS"" BASIS,
	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	See the License for the specific language governing permissions and limitations under the License
%END REM

Option Declare
Option Public
Use ""../libs/functions""

Sub Initialize
    Call echoMessagesUntilQuit()
End Sub"
samples_intro-lab1_helloworld.txt,"%REM
	Copyright 2023 HCL America, Inc.
	Licensed under the Apache License, Version 2.0 (the ""License"");
	you may not use this file except in compliance with the License.
	You may obtain a copy of the License at

	http://www.apache.org/licenses/LICENSE-2.0

	Unless required by applicable law or agreed to in writing,
	software distributed under the License is distributed on an ""AS IS"" BASIS,
	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	See the License for the specific language governing permissions and limitations under the License
%END REM

Print ""Hello World"""
samples_intro-lab2_libs_Lab2Functions.txt,"%REM
	Copyright 2023 HCL America, Inc.
	Licensed under the Apache License, Version 2.0 (the ""License""); 
	you may not use this file except in compliance with the License. 
	You may obtain a copy of the License at

	http://www.apache.org/licenses/LICENSE-2.0

	Unless required by applicable law or agreed to in writing, 
	software distributed under the License is distributed on an ""AS IS"" BASIS, 
	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
	See the License for the specific language governing permissions and limitations under the License	
%END REM

Option Declare
Option Public

Sub PrintMessage(message as String)
    Print message
End Sub

Function Square(value as Integer) As Integer
    value *= value
    Square = value
End Function"
samples_intro-lab2_src_main.txt,"%REM
	Copyright 2023 HCL America, Inc.
	Licensed under the Apache License, Version 2.0 (the ""License"");
	you may not use this file except in compliance with the License.
	You may obtain a copy of the License at

	http://www.apache.org/licenses/LICENSE-2.0

	Unless required by applicable law or agreed to in writing,
	software distributed under the License is distributed on an ""AS IS"" BASIS,
	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	See the License for the specific language governing permissions and limitations under the License
%END REM

Option Declare
Option Public

Use ""../libs/Lab6Functions""

Sub Initialize
    Call PrintMessage(""Hello World"")
    Call PrintMessage(""4 x 4 = "" & Square(4))
End Sub"
samples_intro-lab3_resources_functions.txt,"Option Declare
Option Public

UseVSE ""*JsonVSE""
Use ""../libs/VoltScriptJsonConverter""

Class Person

    Public firstName as String
    Public lastName as String
    Public email as String
    Public gender as String

    Function getName as String
        Return firstName & "" "" & lastName
    End Function

End Class

Function mainFunction(data as String) as JsonObject
    Dim jsonParser as New JsonParser
        Dim root as JsonObject
        Dim response as New JsonObject
        Dim responseObj as New JsonObject
        Dim helper as New JsonConversionHelper
        Dim people as Variant
        Dim i as Integer

        Try
            Call jsonParser.loadFromJson(data)
        Catch
            Error 1400, ""Invalid input: not valid JSON""
        End Try

        Set root = jsonParser.getRootObject()
        Try
            people = helper.ignoreLabel(""id"")._
                jsonArrayToObjects(root, ""Person"", ""../libs/functions"")
            For i = 0 to UBound(people)
                ' people(i) is a Variant, so no compile-error will be thrown if getName() is spelled wrong!
                ' Best practice is to cast to a Person first.
                Call responseObj.insertValue(""name"", people(i).getName())
                Call response.appendToJsonArray(responseObj)
            Next
            Return response
        Catch
            Error 1400, ""Cannot convert people: "" & Error() & "" on line "" & Erl()
        End Try
End Function"
samples_intro-lab3_resources_main.txt,"Option Declare
Option Public

UseVSE ""*StreamVSE""
UseVSE ""*JsonVSE""
Use ""../libs/functions""

Sub Initialize

    Const EOL_CRLF = 0
    Const EOL_ANY = 4

    Dim pipeStream as New Stream
    Dim data as String

    ' Open pipe to STDIO
    Call pipeStream.open("""", ""STDIO"")
    data = pipeStream.readText(true, EOL_ANY, 5)    ' 3rd param is timeout

    Try
        Print mainFunction(data).toString(True)
    Catch
        Print ""Error "" & Error() & "" on line "" & Erl()
    Finally
        Call pipeStream.close()
    End Try

End Sub"
samples_intro-lab3_resources_unitTests.txt,"Option Declare
Option Public

UseVSE ""*JsonVSE""
Use ""../libs/VoltScriptTesting""
Use ""../libs/functions""

Sub Initialize
    Dim testSuite as New TestSuite(""Unit Tests"")
    Dim data as String
    Dim response as JsonObject
    Dim children as Variant

    data = |[{""id"":1,""firstName"":""Bobby"",""lastName"":""Stodd"",""email"":""bstodd0@ibm.com"",""gender"":""Male""},{""id"":2,""firstName"":""Leeanne"",""lastName"":""Mortimer"",""email"":""lmortimer1@posterous.com"",""gender"":""Female""},{""id"":3,""firstName"":""Rochette"",""lastName"":""Santora"",""email"":""rsantora2@unc.edu"",""gender"":""Female""},{""id"":4,""firstName"":""Missy"",""lastName"":""Prestedge"",""email"":""mprestedge3@nih.gov"",""gender"":""Female""},{""id"":5,""firstName"":""Cleavland"",""lastName"":""Lortzing"",""email"":""clortzing4@gov.uk"",""gender"":""Male""}]|
    Set response = mainFunction(data)
    Call testSuite.describe(""Check five elements returned"").assertEqualsInteger(5, response.childCount)
    children = response.getChildren()
    Call testSuite.describe(""Check first element has name"").assertTrue(children(0).IsChild(""name""))
    Call testSuite.describe(""Check first name is Bobby Stodd"").assertEqualsString(""Bobby Stodd"",_
        children(0).getChild(""name"").scalarValue, True)
End Sub"
samples_jsonvse_libs_functions.txt,"%REM
	Copyright 2023 HCL America, Inc.
	Licensed under the Apache License, Version 2.0 (the ""License"");
	you may not use this file except in compliance with the License.
	You may obtain a copy of the License at

	http://www.apache.org/licenses/LICENSE-2.0

	Unless required by applicable law or agreed to in writing,
	software distributed under the License is distributed on an ""AS IS"" BASIS,
	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	See the License for the specific language governing permissions and limitations under the License
%END REM

Option Declare
Option Public

UseVSE ""*JsonVSE""

%REM
    Builds a JSON object with two children, a string and a number.
    Note, the children will be ordered alphabetically, so ""Number"" will be 0,
    ""String"" will be 1.
%END REM
Function buildJsonObj() as JsonObject
    Dim jsonObj as New JsonObject

    Call jsonObj.insertValue(""String"", ""One"")
    Call jsonObj.insertValue(""Number"", 2)

    Return jsonObj
End Function

%REM
    Builds a JSON Object that is an array with two string elements and a number.
    Note the order of insertion is retained
%END REM
Function buildJsonArr() as JsonObject
    Dim jsonArr as New JsonObject

    Call jsonArr.appendToJsonArray(""One"")
    Call jsonArr.appendToJsonArray(""Two"")
    Call jsonArr.appendToJsonArray(2)

    Return jsonArr
End Function

%REM
    Adds a String array to the passed JSON object
%END REM
Sub addVSArrToObj(jsonObj as JsonObject)
    Dim vals(1) as String
    vals(0) = ""Hello""
    vals(1) = ""World""

    Call jsonObj.insertValue(""StringArray"", vals)
End Sub

%REM
    Adds the passed JSON array to the passed JSON object twice.
    The first time it's added by using insertValue and defining the label,
    the second time it's added as a child called ""ObjectArray"",
    the third time it's added as a child called ""ArrayLabel""
%END REM
Sub addJsonArrToObject(jsonObj as JsonObject, jsonArr as JsonObject)
    Call jsonObj.insertValue(""JSONArray"", jsonArr)

    Call jsonObj.insertObject(jsonArr, ""ObjectArray"")
    jsonArr.label = ""ArrayLabel""
    Call jsonObj.insertObject(jsonArr)
End Sub

%REM
    Adds a child JSON object to the passed JSON object
%END REM
Sub addJsonObj(jsonObj as JsonObject)
    Dim childObj as New JsonObject()
    Call childObj.insertValue(""hello"",""world"")

    Call jsonObj.insertValue(""child1"", childObj)
    Call jsonObj.insertObject(childObj, ""child2"")

    childObj.label = ""child3""
    Call jsonObj.insertObject(childObj)
End Sub

%REM
    childObj is modified after being added to parent.
    But because childObj was deep-copied, the version in parent was a snapshot at that time
%END REM
Function modifyChild() as JsonObject
    Dim parent as New JsonObject
    Dim childObj as New JsonObject
    Call childObj.insertValue(""elem1"",""hello world"")
    childObj.label = ""child""

    Call parent.insertObject(childObj)
    Call childObj.insertValue(""elem2"",2)
    Print parent.toString(false)
    Return parent
End Function

%REM
    Parses a passed string of JSON. This will throw an error
%END REM
Function parseJsonString(json as String) as JsonObject

    Dim parser as New JsonParser()
    Call parser.loadFromJson(json)
    Return parser.getRootObject

End Function

%REM
    Parses a JSON file at the location passed, relative to the root of this project
%END REM
Function parseJsonFile(fileName as String) as JsonObject

    Dim parser as New JsonParser()
    Call parser.loadFromFile(CurDir & ""/"" & fileName)
    Return parser.getRootObject

End Function

%REM
    Iterates the children in goodJson and checks its type
%END REM
Function checkJsonType(jsonObj as JsonObject, label as String) as String
    Dim child as jsonObject
    Dim resp as String
    Dim count as Integer

    Set child = jsonObj.getChild(label)
    resp = child.JsonType & "" ""
    If child.isNumber() Then count += 1
    If child.isObject() Then count += 2
    If child.isScalar() Then count += 4
    If child.isString() Then count += 8
    If child.isArray() Then count += 16
    If child.isBoolean() Then count += 32
    Return resp & count

End Function"
samples_jsonvse_test_parseUnitTests.txt,"%REM
	Copyright 2023 HCL America, Inc.
	Licensed under the Apache License, Version 2.0 (the ""License"");
	you may not use this file except in compliance with the License.
	You may obtain a copy of the License at

	http://www.apache.org/licenses/LICENSE-2.0

	Unless required by applicable law or agreed to in writing,
	software distributed under the License is distributed on an ""AS IS"" BASIS,
	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	See the License for the specific language governing permissions and limitations under the License
%END REM

Option Declare
Option Public

Use ""../libs/functions""
Use ""../libs/VoltScriptTesting""

Const goodJson = |{""firstName"":""John"",""lastName"":""Doe"",""age"":42,""children"":[""Jane"",""Frank""]}|
Const badJson = ""This is not Json""

Sub Initialize

    Dim testRunner as New TestRunner(""Test JSON Parsing"")
    Dim testSuite as New TestSuite(""Test String Parsing"")
    Call testRunner.addTestSuite(testSuite)

    Dim jsonObj as JsonObject
    Set jsonObj = parseJsonString(goodJson)
    Dim children as JsonObject
    Dim childrenArr as Variant
    Call testSuite.describe(""Check good JSON parsed"").assertTrue(Not jsonObj Is Nothing)
    Call testSuite.describe(""Check jsonObj is object"").assertTrue(jsonObj.isObject)
    Call testSuite.describe(""Check age is scalar"").assertTrue(jsonObj.getChild(""age"").isScalar)
    Call testSuite.describe(""Check labels sorted alphabetically"").assertEqualsString(""age"", jsonObj.getChildren()(0).Label, true)
    Call testSuite.describe(""Check firstName"").assertEqualsString(""John"", CStr(jsonObj.getChild(""firstName"").scalarValue), True)
    Set children = jsonObj.getChild(""children"")
    Call testSuite.describe(""Check children is array"").assertTrue(children.isArray)
    Call testSuite.describe(""Check children has two values"").assertEqualsInteger(2, children.childCount)
    Call testSuite.describe(""Check child 1 is Jane"").assertEqualsString(""Jane"", children.getChildren()(0).scalarValue, true)
    Call testSuite.describe(""Check child 2 is Frank"").assertEqualsString(""Frank"", children.getChildren()(1).scalarValue, true)
    childrenArr = children.valueArray
    Call testSuite.describe(""Check children"").assertEqualsString(""Jane,Frank"", Join(childrenArr, "",""), True)

    Call testSuite.describe(""Test parsing bad JSON"")
    Try
        Set jsonObj = parseJsonString(badJson)
        Call testSuite.addResult(False, ""Successfully parsed JSON as "" & jsonObj.toString(false))
    Catch
        Call testSuite.addResult(True, """")
        Call testSuite.describe(""Verify error number is 400"").assertEqualsInteger(400, Err())
        Call testSuite.describe(""Validate error message is as expected"").assertTrue(Error() Like ""Must supply a valid JSON string*"")
    End Try

    Dim testSuite2 as New TestSuite(""Test File Parsing"")
    Call testRunner.addTestSuite(testSuite2)
    Set jsonObj = parseJsonFile(""sampleJson/goodJson.json"")
    Call testSuite2.describe(""Check good JSON parsed"").assertTrue(Not jsonObj Is Nothing)
    Call testSuite2.describe(""Check jsonObj is object"").assertTrue(jsonObj.isObject)
    Call testSuite2.describe(""Check age is scalar"").assertTrue(jsonObj.getChild(""age"").isScalar)

    Call testSuite2.describe(""Test parsing bad JSON file"")
    Try
        Set jsonObj = parseJsonFile(""sampleJson/badJson.json"")
        Call testSuite2.addResult(False, ""Successfully parsed JSON as "" & jsonObj.toString(false))
    Catch
        Call testSuite2.addResult(True, """")
        Call testSuite2.describe(""Verify error number is 400"").assertEqualsInteger(400, Err())
        Print Error()
        Call testSuite2.describe(""Validate error message is as expected"").assertTrue(Error() Like ""JSON text is not valid"")
    End Try

    Call testSuite2.describe(""Test opening file not found"")
    Try
        Set jsonObj = parseJsonFile(""sampleJson/noFile.json"")
        Call testSuite2.addResult(False, ""Successfully parsed non-existent file"")
    Catch
        Call testSuite2.addResult(True, """")
        Call testSuite2.describe(""Verify error number is 404"").assertEqualsInteger(404, Err())
        Call testSuite2.describe(""Verify error message starts File could not be opened"")._
            assertTrue(Error() Like ""File could not be opened*"")
    End Try

    Set jsonObj = parseJsonFile(""sampleJson/goodJson.json"")
    Print jsonObj.toString(false)
    Call testSuite2.describe(""Check first name is string"").assertEqualsString(""string 12"", checkJsonType(jsonObj, ""firstName""), True)
    Call testSuite2.describe(""Check first name is string"").assertEqualsString(""number 5"", checkJsonType(jsonObj, ""age""), True)
    Call testSuite2.describe(""Check first name is string"").assertEqualsString(""array 16"", checkJsonType(jsonObj, ""children""), True)
    Call testSuite2.describe(""Check first name is string"").assertEqualsString(""boolean 36"", checkJsonType(jsonObj, ""living""), True)
    Call testSuite2.describe(""Check first name is string"").assertEqualsString(""object 2"", checkJsonType(jsonObj, ""address""), True)

    Call testSuite2.describe(""Check address is child"").assertTrue(jsonObj.isChild(""address""))
    Dim path(1) as String
    path(0) = ""address""
    path(1) = ""add1""
    Call testSuite2.describe(""Check address/add1 can be found"").assertTrue(jsonObj.isDescendant(path))
    path(1) = ""add3""
    Call testSuite2.describe(""Check address/add3 can't be found"").assertFalse(jsonObj.isDescendant(path))
    path(1) = ""add2""
    Dim actualObj as JsonObject
    Call testSuite2.describe(""Find address/add2"").assertTrue(actualObj Is Nothing)
    Set actualObj = jsonObj.findObjectByPath(path)
    Call testSuite2.describe(""Find address/add2"").assertTrue(Not actualObj Is Nothing)

End Sub"
samples_jsonvse_test_unitTests.txt,"%REM
	Copyright 2023 HCL America, Inc.
	Licensed under the Apache License, Version 2.0 (the ""License"");
	you may not use this file except in compliance with the License.
	You may obtain a copy of the License at

	http://www.apache.org/licenses/LICENSE-2.0

	Unless required by applicable law or agreed to in writing,
	software distributed under the License is distributed on an ""AS IS"" BASIS,
	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	See the License for the specific language governing permissions and limitations under the License
%END REM

Option Declare
Option Public

Use ""../libs/VoltScriptTesting""
Use ""../libs/functions""

Sub Initialize

    Dim testRunner as New TestRunner(""JSON VSE"")
    Dim testSuite as New TestSuite(""Test JSON Building"")
    Dim jsonObj as JsonObject
    Dim jsonArr as JsonObject

    Call testRunner.addTestSuite(testSuite)
    Set jsonObj = buildJsonObj()
    Call testSuite.describe(""Test JSON object has two children"").assertEqualsInteger(2, jsonObj.childCount)
    Call testSuite.describe(""Test children are re-ordered alphabetically"").assertEqualsString(""Number"", jsonObj.getChildren()(0).Label, False)
    Call testSuite.describe(""Test 'Number' is a a long"").assertIs(""LONG"", jsonObj.getChild(""Number"").scalarValue)
    Call testSuite.describe(""Test 'String' is a string"").assertIs(""STRING"", jsonObj.getChild(""String"").scalarValue)

    Set jsonArr = buildJsonArr()
    Call testSuite.describe(""Test array has three children"").assertEqualsInteger(3, jsonArr.childCount)
    Call testSuite.describe(""Test first child is 'One'"").assertEqualsPrimitive(""One"", jsonArr.getChildren()(0).scalarValue)
    Call testSuite.describe(""Test first child is 'Two'"").assertEqualsPrimitive(""Two"", jsonArr.getChildren()(1).scalarValue)
    Call testSuite.describe(""Test first child is 2"").assertEqualsPrimitive(2, jsonArr.getChildren()(2).scalarValue)

    Call addVSArrToObj(jsonObj)
    Call testSuite.describe(""Test array is added"").assertTrue(jsonObj.isChild(""StringArray""))
    Call testSuite.describe(""Test array has two elements"").assertEqualsInteger(2, jsonObj.getChild(""StringArray"").childCount)
    Call testSuite.describe(""Test array values"").assertEqualsString(""HelloWorld"",_
        CStr(jsonObj.getChild(""StringArray"").getChildren()(0).scalarValue) &_
        CStr(jsonObj.getChild(""StringArray"").getChildren()(1).scalarValue), True)

    Set jsonObj = new JsonObject
    Call addJsonArrToObject(jsonObj, jsonArr)
    Print jsonObj.toString(true)
    Call testSuite.describe(""Test array was added three times"").assertEqualsInteger(3, jsonObj.childCount)
    Call testSuite.describe(""Test JSONArray was added"").assertTrue(jsonObj.isChild(""JSONArray""))
    Call testSuite.describe(""Test ObjectArray was added"").assertTrue(jsonObj.isChild(""ObjectArray""))
    Call testSuite.describe(""Test ArrayLabel was added"").assertTrue(jsonObj.isChild(""ArrayLabel""))
    Call testSuite.describe(""Test child 0 and child 1 match"").assertEqualsString(jsonObj.getChildren()(0).toString(false),_
        jsonObj.getChildren()(1).toString(false), true)
    Call testSuite.describe(""Test child 1 and child 2 match"").assertEqualsString(jsonObj.getChildren()(1).toString(false),_
        jsonObj.getChildren()(2).toString(false), true)

    Set jsonObj = New JsonObject()
    Call addJsonObj(jsonObj)
    Call testSuite.describe(""Check jsonObj has 3 children"").assertEqualsInteger(3, jsonObj.childCount)
    Call testSuite.describe(""Test child1 was added"").assertTrue(jsonObj.isChild(""child1""))
    Call testSuite.describe(""Test child2 was added"").assertTrue(jsonObj.isChild(""child2""))
    Call testSuite.describe(""Test child3 was added"").assertTrue(jsonObj.isChild(""child3""))
    Call testSuite.describe(""Test child 0 and child 1 match"").assertEqualsString(jsonObj.getChildren()(0).toString(false),_
        jsonObj.getChildren()(1).toString(false), true)
    Call testSuite.describe(""Test child 1 and child 2 match"").assertEqualsString(jsonObj.getChildren()(1).toString(false),_
        jsonObj.getChildren()(2).toString(false), true)

    Set jsonObj = modifyChild()
    Call testSuite.describe(""Test jsonObj has elem1"").assertTrue(jsonObj.getChild(""child"").isChild(""elem1""))
    Call testSuite.describe(""Test jsonObj does not have elem2"").assertFalse(jsonObj.isChild(""elem2""))

End Sub"
samples_keepvse_libs_functions.txt,"%REM
	Copyright 2023 HCL America, Inc.
	Licensed under the Apache License, Version 2.0 (the ""License"");
	you may not use this file except in compliance with the License.
	You may obtain a copy of the License at

	http://www.apache.org/licenses/LICENSE-2.0

	Unless required by applicable law or agreed to in writing,
	software distributed under the License is distributed on an ""AS IS"" BASIS,
	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	See the License for the specific language governing permissions and limitations under the License
%END REM

Option Declare
Option Public

UseVSE ""*KeepVSE""
UseVSE ""*JsonVSE""

%REM
    Set these for your Domino REST API environment.
    Server_Name in format http(s)://www.myServerName.com/api/v1
%END REM
Const SERVER_NAME = """"
Const USERNAME_ENVVAR = ""KEEP_USERNAME""
Const USERPASSWORD_ENVVAR = ""KEEP_PASSWORD""

%REM
    Logs into a Domino REST API server, using username and password stored in environment variables.
    NOTE: Environment variables need to be set *before* starting the current bash session when running the code.
    Set the SERVER_NAME constant above.
%END REM
Function login(server as KeepServer, serverName as String, userName as String, password as String)
    server.serverURL = SERVER_NAME
    Call server.login(userName, password)
End Function

%REM
    Gets a scope by name for the current KeepServer
%END REM
Function getScope(server as KeepServer, scopeName as String) as KeepScope
    Return server.getScope(scopeName)
End Function

%REM
    Gets the first 5 view entries from a passed view for a passed scope
%END REM
Function getViewEntries(server as KeepServer, scopeName as String, viewName as String) as JsonObject
    Dim scope as KeepScope
    Dim parser as New JsonParser()
    Set scope = server.getScope(scopeName)
    Call parser.loadFromJSON(scope.getViewEntries(viewName, 5))
    Return parser.getRootObject()
End Function

%REM
    Gets information about the default mode for a given Form in a given scope
%END REM
Function getDefaultMode(server as KeepServer, scopeName as String, formName as String) as JsonObject
    Dim scope as KeepScope
    Dim parser as New JsonParser()
    Dim jsonObj as New JsonObject
    Set scope = server.getScope(scopeName)
    Call parser.loadFromJson(scope.getFormInfo(formName))
    Set jsonObj = parser.getRootObject()
    ForAll mode in jsonObj.getChild(""formModes"").getChildren()
        If (""default"" = CStr(mode.getChild(""modeName"").scalarValue)) Then
            Print mode.toString(True)
        End If
    End ForAll
End Function

%REM
    Creates a Customer document in the demo scope
%END REM
Function createCustomer(server as KeepServer) as KeepDocument
    Dim scope as KeepScope
    Dim jsonObj as New JsonObject
    Dim doc as KeepDocument
    Set scope = server.getScope(""demo"")
    Call jsonObj.insertValue(""Form"", ""Customer"")
    Call jsonObj.insertValue(""Color"", ""Red"")
    Call jsonObj.insertValue(""first_name"", ""John"")
    Call jsonObj.insertValue(""last_name"", ""Doe"")
    Call jsonObj.insertValue(""gender"", ""Male"")
    Call jsonObj.insertValue(""Pet"", ""Cockapoo"")
    Set doc = scope.createDocument(jsonObj.toString(false))
    Call doc.save("""", ""Customer"")
    Return doc
End Function

%REM
    Takes an array of JsonObjects and creates documents with it
%END REM
Sub createCustomers(server as KeepServer, jsonObjs as Variant)
    Dim scope as KeepScope
    Dim doc as KeepDocument
    Set scope = server.getScope(""demo"")
    ForAll json in jsonObjs
        Set doc = scope.createDocument()
        doc.JsonValue = json.toString(false)
        Call doc.save("""", ""Customer"")
    End ForAll
End Sub

%REM
    Gets a document from a given scope with a given UNID.
    gets it without any rich text manipulation, computing default value / input translation /
    input validation formulas, and returning metadata
%END REM
Function getDocument(server as KeepServer, scopeName as String, unid as String) as KeepDocument
    Dim scope as KeepScope
    Dim doc as KeepDocument
    Set scope = server.getScope(scopeName)
    Set doc = scope.getDocument(unid, False, False, True, True, ""default"")
    Return doc
End Function

%REM
    Gets Form Access Modes for a document from a given scope with a given UNID.
%END REM
Function getDocumentModes(server as KeepServer, scopeName as String, unid as String) as JsonObject
    Dim scope as KeepScope
    Dim parser as New JsonParser()
    Set scope = server.getScope(scopeName)
    Call parser.loadFromJSON(scope.getDocumentModes(unid))
    Return parser.getRootObject()
End Function

%REM
    Gets a document and updates the Color field
%END REM
Function updateDocument(server as KeepServer, scopeName as String, unid as String) as KeepDocument
    Dim parser as New JsonParser()
    Dim jsonObj as JsonObject
    Dim scope as KeepScope
    Dim doc as KeepDocument
    Set scope = server.getScope(scopeName)
    Set doc = scope.getDocument(unid)
    Call parser.loadFromJSON(doc.JsonValue)
    Set jsonObj = parser.getRootObject()
    Call jsonObj.insertValue(""Color"", ""Red"")
    doc.JsonValue = jsonObj.toString(False)
    Call doc.save("""", ""default"")
    Return doc
End Function

%REM
    Deletes a document without retrieving it first
%END REM
Sub deleteDocumentByID(server as KeepServer, scopeName as String, unid as String)
    Dim scope as KeepScope
    Dim doc as KeepDocument
    Set scope = server.getScope(scopeName)
    Call scope.deleteDocumentByID(unid, ""admin"")
End Sub

%REM
    Gets a document from a given scope with a given UNID. Creates a copy, then deletes the original
%END REM
Function copyAndDeleteDocument(server as KeepServer, scopeName as String, unid as String) as KeepDocument
    Dim scope as KeepScope
    Dim doc as KeepDocument
    Dim newDoc as KeepDocument
    Set scope = server.getScope(scopeName)
    Set doc = scope.getDocument(unid, False, False)
    Set newDoc = scope.createDocument()
    newDoc.jsonValue = doc.jsonValue
    Call newDoc.save("""", ""default"")
    Call scope.deleteDocument(doc, ""admin"")
    Return doc
End Function

%REM
    Gets documents for given UNIDs, returning a Variant which is an array of strings
%END REM
Function getDocuments(server as KeepServer, scopeName as String, unids() as String) as Variant
    Dim scope as KeepScope
    Dim docs as Variant
    Set scope = server.getScope(scopeName)
    docs = scope.getDocuments(unids)
    Return docs
End Function

%REM
    Builds a DQL query using JSON VSE and submits it to Domino REST API
%END REM
Function performDqlQuery(server as KeepServer, scopeName as String) as String
    Dim scope as KeepScope
    Dim query as New JsonObject
    Dim vars as New JsonObject

    Set scope = server.getScope(""demo"")
    Call query.insertValue(""maxScanDocs"", 5000)
    Call query.insertValue(""maxScanEntries"", 2000)
    Call query.insertValue(""mode"", ""default"")
    Call query.insertValue(""noViews"", False)
    Call query.insertValue(""timeoutSecs"", 300)
    Call query.insertValue(""query"", ""form = 'Customer' and Color = ?Color"")
    Call query.insertValue(""viewRefresh"", False)
    Set vars = new JsonObject()
    vars.label = ""variables""
    Call vars.insertValue(""Color"", ""Blue"")
    Call query.insertObject(vars)
    Return scope.dqlQuery(query.toString(True), ""execute"", 5)
End Function

%REM
    Builds a DQL query using JSON VSE and submits it to Domino REST API
%END REM
Function updateDocuments(server as KeepServer, scopeName as String) as String
    Dim scope as KeepScope
    Dim replaceItems as New JsonObject()

    Set scope = server.getScope(""demo"")
    Call replaceItems.insertValue(""Color"", ""Maroon"")

    Return scope.bulkUpdate(""form = 'Customer' and Color = 'Red'"", 5000, True,_
        replaceItems.toString(false), ""default"", True)
End Function

%REM
    Creates an attachment in a field called  ""RichText""
%END REM
Function addAttachment(doc as KeepDocument, filePath as String) as String
    Call doc.save("""", ""default"")
    Return doc.createAttachment(CurDir() & ""/libs/functions.vss"", ""RichText"")
End Function"
samples_keepvse_src_createDocument.txt,"%REM
	Copyright 2023 HCL America, Inc.
	Licensed under the Apache License, Version 2.0 (the ""License"");
	you may not use this file except in compliance with the License.
	You may obtain a copy of the License at

	http://www.apache.org/licenses/LICENSE-2.0

	Unless required by applicable law or agreed to in writing,
	software distributed under the License is distributed on an ""AS IS"" BASIS,
	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	See the License for the specific language governing permissions and limitations under the License
%END REM

Option Declare
Option Public

Use ""../libs/functions""

Sub Initialize
    Dim server as New KeepServer
    Dim scope as KeepScope
    Dim jsonObj as New JsonObject()
    Dim doc as KeepDocument

    Try
        server.serverURL = SERVER_NAME
        Call server.login(Environ$(USERNAME_ENVVAR), Environ$(USERPASSWORD_ENVVAR))
        Set scope = server.getScope(""demo"")

        Set doc = scope.createDocument()
        Call jsonObj.insertValue(""Form"", ""Customer"")
        Call jsonObj.insertValue(""Color"", ""Red"")
        Call jsonObj.insertValue(""first_name"", ""John"")
        Call jsonObj.insertValue(""last_name"", ""Doe"")
        Call jsonObj.insertValue(""gender"", ""Male"")
        Call jsonObj.insertValue(""Pet"", ""Cockapoo"")
        doc.JsonValue = jsonObj.toString(false)
        Call doc.save()
        Print doc.unid
        Print doc.computedWithForm

    Catch
        Print ""Error "" & Error() & "" on line "" & Erl()
    Finally
        If (Not server is Nothing && server.connected) Then server.logout
    End Try
End Sub"
samples_keepvse_src_createDocumentAndAttachment.txt,"%REM
	Copyright 2023 HCL America, Inc.
	Licensed under the Apache License, Version 2.0 (the ""License"");
	you may not use this file except in compliance with the License.
	You may obtain a copy of the License at

	http://www.apache.org/licenses/LICENSE-2.0

	Unless required by applicable law or agreed to in writing,
	software distributed under the License is distributed on an ""AS IS"" BASIS,
	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	See the License for the specific language governing permissions and limitations under the License
%END REM

Option Declare
Option Public

Use ""../libs/functions""

Sub Initialize
    Dim server as New KeepServer
    Dim scope as KeepScope
    Dim jsonObj as New JsonObject()
    Dim doc as KeepDocument
    Dim retVal as String

    Try
        server.serverURL = SERVER_NAME
        Call server.login(Environ$(USERNAME_ENVVAR), Environ$(USERPASSWORD_ENVVAR))
        Set scope = server.getScope(""demo"")

        Set doc = scope.createDocument()
        Call jsonObj.insertValue(""Form"", ""Customer2"")
        Call jsonObj.insertValue(""Color"", ""Red"")
        Call jsonObj.insertValue(""first_name"", ""John"")
        Call jsonObj.insertValue(""last_name"", ""Doe"")
        Call jsonObj.insertValue(""gender"", ""Male"")
        Call jsonObj.insertValue(""Pet"", ""Cockapoo"")
        doc.JsonValue = jsonObj.toString(false)
        Call doc.save("""", ""default"")
        Print doc.unid
        retval = doc.createAttachment(CurDir() & ""/src/createDocumentAndAttachment.vss"", ""RichText"")
        Print retVal

    Catch
        Print ""Error "" & Error() & "" on line "" & Erl()
    Finally
        If (Not server is Nothing && server.connected) Then server.logout
    End Try
End Sub"
samples_keepvse_src_deleteDocument.txt,"%REM
	Copyright 2023 HCL America, Inc.
	Licensed under the Apache License, Version 2.0 (the ""License"");
	you may not use this file except in compliance with the License.
	You may obtain a copy of the License at

	http://www.apache.org/licenses/LICENSE-2.0

	Unless required by applicable law or agreed to in writing,
	software distributed under the License is distributed on an ""AS IS"" BASIS,
	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	See the License for the specific language governing permissions and limitations under the License
%END REM

Option Declare
Option Public

Use ""../libs/functions""

Const UNID = """" 'UPDATE THIS

Sub Initialize
    Dim server as New KeepServer
    Dim scope as KeepScope
    Dim parser as New JsonParser()
    Dim jsonObj as New JsonObject()
    Dim doc as KeepDocument

    Try
        server.serverURL = SERVER_NAME
        Call server.login(Environ$(USERNAME_ENVVAR), Environ$(USERPASSWORD_ENVVAR))
        Set scope = server.getScope(""demo"")

        Call scope.deleteDocumentByID(UNID, ""admin"")
    Catch
        Print ""Error "" & Error() & "" ("" & Err() & "") on line "" & Erl()
    Finally
        If (Not server is Nothing && server.connected) Then server.logout
    End Try
End Sub"
samples_keepvse_src_formInfo.txt,"%REM
	Copyright 2023 HCL America, Inc.
	Licensed under the Apache License, Version 2.0 (the ""License"");
	you may not use this file except in compliance with the License.
	You may obtain a copy of the License at

	http://www.apache.org/licenses/LICENSE-2.0

	Unless required by applicable law or agreed to in writing,
	software distributed under the License is distributed on an ""AS IS"" BASIS,
	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	See the License for the specific language governing permissions and limitations under the License
%END REM

Option Declare
Option Public

Use ""../libs/functions""

Sub Initialize
    Dim server as New KeepServer
    Dim scope as KeepScope
    Dim categories as String
    Dim parser as New JsonParser()
    Dim jsonObj as JsonObject

    Try
        server.serverURL = SERVER_NAME
        Call server.login(Environ$(USERNAME_ENVVAR), Environ$(USERPASSWORD_ENVVAR))
        Set scope = server.getScope(""demo"")
        Call parser.loadFromJson(scope.getFormInfo(""Customer""))
        Set jsonObj = parser.getRootObject()
        If (Not jsonObj.isChild(""formModes"")) Then
            Print parser.toString(True) 'Error occurred
        Else
            ForAll mode in jsonObj.getChild(""formModes"").getChildren()
                If (""default"" = CStr(mode.getChild(""modeName"").scalarValue)) Then
                    ForAll field in mode.getChild(""fields"").getChildren()
                        Print ""FIELD "" & CStr(field.getChild(""externalName"").scalarValue)
                        Print ""    type: "" & CStr(field.getChild(""type"").scalarValue)
                        Print ""    format: "" & CStr(field.getChild(""format"").scalarValue)
                        Print ""    access: "" & CStr(field.getChild(""fieldAccess"").scalarValue)
                    End ForAll
                Else
                    Print mode.getChild(""modeName"").toString(False)
                End If
            End ForAll
        End If
    Catch
        Print ""Error "" & Error() & "" on line "" & Erl()
    Finally
        If (Not server is Nothing && server.connected) Then server.logout
    End Try

End Sub"
samples_keepvse_src_getDocument.txt,"%REM
	Copyright 2023 HCL America, Inc.
	Licensed under the Apache License, Version 2.0 (the ""License"");
	you may not use this file except in compliance with the License.
	You may obtain a copy of the License at

	http://www.apache.org/licenses/LICENSE-2.0

	Unless required by applicable law or agreed to in writing,
	software distributed under the License is distributed on an ""AS IS"" BASIS,
	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	See the License for the specific language governing permissions and limitations under the License
%END REM

Option Declare
Option Public

Use ""../libs/functions""

Const UNID = """" ' UPDATE THIS

Sub Initialize
    Dim server as New KeepServer
    Dim scope as KeepScope
    Dim doc as KeepDocument

    Try
        server.serverURL = SERVER_NAME
        Call server.login(Environ$(USERNAME_ENVVAR), Environ$(USERPASSWORD_ENVVAR))
        Set scope = server.getScope(""demo"")

        Set doc = scope.getDocument(UNID, False, False, True, True, ""dql"")
        Print ""UNID: "" & doc.unid
        Print ""JSON: "" & doc.JsonValue
        'Print ""Form modes: "" & scope.GetDocumentModes(UNID)

    Catch
        Print ""Error "" & Error() & "" on line "" & Erl()
    Finally
        If (Not server is Nothing && server.connected) Then server.logout
    End Try
End Sub"
samples_keepvse_src_getDocuments.txt,"%REM
	Copyright 2023 HCL America, Inc.
	Licensed under the Apache License, Version 2.0 (the ""License"");
	you may not use this file except in compliance with the License.
	You may obtain a copy of the License at

	http://www.apache.org/licenses/LICENSE-2.0

	Unless required by applicable law or agreed to in writing,
	software distributed under the License is distributed on an ""AS IS"" BASIS,
	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	See the License for the specific language governing permissions and limitations under the License
%END REM

Option Declare
Option Public

Use ""../libs/functions""

' UPDATE THESE
Const UNID1 = """"
Const UNID2 = """"
Const UNID3 = """"

Sub Initialize
    Dim server as New KeepServer
    Dim scope as KeepScope
    Dim unids(2) as String
    Dim docs as Variant

    Try
        server.serverURL = SERVER_NAME
        Call server.login(Environ$(USERNAME_ENVVAR), Environ$(USERPASSWORD_ENVVAR))
        Set scope = server.getScope(""demo"")
        unids(0) = UNID1
        unids(1) = UNID2
        unids(2) = UNID3
        docs = getDocuments(server, ""demo"", unids)
        ForAll doc in docs
            Print doc
        End ForAll

    Catch
        Print ""Error "" & Error() & "" on line "" & Erl()
    Finally
        If (Not server is Nothing && server.connected) Then server.logout
    End Try

End Sub"
samples_keepvse_src_getDocumentsDql.txt,"%REM
	Copyright 2023 HCL America, Inc.
	Licensed under the Apache License, Version 2.0 (the ""License"");
	you may not use this file except in compliance with the License.
	You may obtain a copy of the License at

	http://www.apache.org/licenses/LICENSE-2.0

	Unless required by applicable law or agreed to in writing,
	software distributed under the License is distributed on an ""AS IS"" BASIS,
	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	See the License for the specific language governing permissions and limitations under the License
%END REM

Option Declare
Option Public

Use ""../libs/functions""

Sub Initialize
    Dim server as New KeepServer
    Dim docs as String

    Try
        server.serverURL = SERVER_NAME
        Call server.login(Environ$(USERNAME_ENVVAR), Environ$(USERPASSWORD_ENVVAR))
        docs = performDqlQuery(server, ""demo"")
        Print docs

    Catch
        Print ""Error "" & Error() & "" on line "" & Erl()
    Finally
        If (Not server is Nothing && server.connected) Then server.logout
    End Try
End Sub"
samples_keepvse_src_getScope.txt,"%REM
	Copyright 2023 HCL America, Inc.
	Licensed under the Apache License, Version 2.0 (the ""License"");
	you may not use this file except in compliance with the License.
	You may obtain a copy of the License at

	http://www.apache.org/licenses/LICENSE-2.0

	Unless required by applicable law or agreed to in writing,
	software distributed under the License is distributed on an ""AS IS"" BASIS,
	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	See the License for the specific language governing permissions and limitations under the License
%END REM

Option Declare
Option Public

Use ""../libs/functions""

Sub Initialize

    Dim server as New KeepServer
    Dim scope as KeepScope

    Try
        server.serverURL = SERVER_NAME
        Call server.login(Environ$(USERNAME_ENVVAR), Environ$(USERPASSWORD_ENVVAR))
        Set scope = server.getScope(""demo"")
        Print ""Scope name: "" & scope.Name
        Print """"
        Print ""Scope JSON: "" & scope.JsonValue
        Print """"
        Print ""Lists JSON: "" & scope.listAllViews()
        Print """"
        Print ""Forms JSON:"" & scope.listAllForms()
        Print """"
        Print ""Agents JSON: "" & scope.getAllAgents()
    Catch
        Print ""Error "" & Error() & "" on line "" & Erl()
    Finally
        If (Not server is Nothing && server.connected) Then server.logout
    End Try

End Sub"
samples_keepvse_src_getServerInfo.txt,"%REM
	Copyright 2023 HCL America, Inc.
	Licensed under the Apache License, Version 2.0 (the ""License"");
	you may not use this file except in compliance with the License.
	You may obtain a copy of the License at

	http://www.apache.org/licenses/LICENSE-2.0

	Unless required by applicable law or agreed to in writing,
	software distributed under the License is distributed on an ""AS IS"" BASIS,
	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	See the License for the specific language governing permissions and limitations under the License
%END REM

Option Declare
Option Public

Use ""../libs/functions""

Sub Initialize

    Dim server as New KeepServer

    Try
        server.serverURL = SERVER_NAME
        Call server.login(Environ$(USERNAME_ENVVAR), Environ$(USERPASSWORD_ENVVAR))

        Print ""Server Info: "" & server.serverInfo
        Print ""Available scopes: "" & server.ScopeList
        Print ""Access Scopes: "" & server.accessScopes
    Catch
        Print ""Error "" & Error() & "" on line "" & Erl()
    Finally
        If (Not server is Nothing && server.connected) Then server.logout
    End Try

End Sub"
samples_keepvse_src_getView.txt,"%REM
	Copyright 2023 HCL America, Inc.
	Licensed under the Apache License, Version 2.0 (the ""License"");
	you may not use this file except in compliance with the License.
	You may obtain a copy of the License at

	http://www.apache.org/licenses/LICENSE-2.0

	Unless required by applicable law or agreed to in writing,
	software distributed under the License is distributed on an ""AS IS"" BASIS,
	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	See the License for the specific language governing permissions and limitations under the License
%END REM

Option Declare
Option Public

Use ""../libs/functions""

Sub Initialize

    Dim server as New KeepServer
    Dim scope as KeepScope
    Dim parser as New JsonParser()

    Try
        server.serverURL = SERVER_NAME
        Call server.login(Environ$(USERNAME_ENVVAR), Environ$(USERPASSWORD_ENVVAR))
        Set scope = server.getScope(""demo"")
        Call parser.loadFromJSON(scope.getViewEntries(""Customers"", 5))
        Print parser.toString(True)
    Catch
        Print ""Error "" & Error() & "" on line "" & Erl()
    Finally
        If (Not server is Nothing && server.connected) Then server.logout
    End Try

End Sub"
samples_keepvse_src_getViewCategorized.txt,"%REM
	Copyright 2023 HCL America, Inc.
	Licensed under the Apache License, Version 2.0 (the ""License"");
	you may not use this file except in compliance with the License.
	You may obtain a copy of the License at

	http://www.apache.org/licenses/LICENSE-2.0

	Unless required by applicable law or agreed to in writing,
	software distributed under the License is distributed on an ""AS IS"" BASIS,
	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	See the License for the specific language governing permissions and limitations under the License
%END REM

Option Declare
Option Public

Use ""../libs/functions""

Const VIEW_NAME = ""Customers Categorized""

Sub Initialize

    Dim server as New KeepServer
    Dim scope as KeepScope
    Dim categories as String
    Dim parser as New JsonParser()
    Dim jsonObj as JsonObject
    Dim cat(0) as String

    Try
        server.serverURL = SERVER_NAME
        Call server.login(Environ$(USERNAME_ENVVAR), Environ$(USERPASSWORD_ENVVAR))
        Set scope = server.getScope(""demo"")
        ' Requires a categorized view called CustomersCategorized to be added to demo database
        ' containing Customer documents where the first column is Color field
        ' and exposed as a List in Domino REST API
        categories = scope.getViewCategories(VIEW_NAME, 0)
        Call parser.loadFromJSON(categories)
        Set jsonObj = parser.getRootObject()
        cat(0) = jsonObj.getChildren()(0).getChildren()(3).scalarValue
        Call parser.loadFromJSON(scope.getViewEntriesByKey(VIEW_NAME, cat, 1, False))
        Print parser.toString(True)
    Catch
        Print ""Error "" & Error() & "" on line "" & Erl()
    Finally
        If (Not server is Nothing && server.connected) Then server.logout
    End Try

End Sub"
samples_keepvse_src_updateDocument.txt,"%REM
	Copyright 2023 HCL America, Inc.
	Licensed under the Apache License, Version 2.0 (the ""License"");
	you may not use this file except in compliance with the License.
	You may obtain a copy of the License at

	http://www.apache.org/licenses/LICENSE-2.0

	Unless required by applicable law or agreed to in writing,
	software distributed under the License is distributed on an ""AS IS"" BASIS,
	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	See the License for the specific language governing permissions and limitations under the License
%END REM

Option Declare
Option Public

Use ""../libs/functions""

Const UNID = """" 'UPDATE THIS

Sub Initialize
    Dim server as New KeepServer
    Dim scope as KeepScope
    Dim parser as New JsonParser()
    Dim jsonObj as New JsonObject()
    Dim doc as KeepDocument

    Try
        server.serverURL = SERVER_NAME
        Call server.login(Environ$(USERNAME_ENVVAR), Environ$(USERPASSWORD_ENVVAR))
        Set scope = server.getScope(""demo"")

        Set doc = scope.getDocument(UNID)
        Call parser.loadFromJSON(doc.JsonValue)
        Set jsonObj = parser.getRootObject()
        Call jsonObj.insertValue(""Color"", ""Red"")
        doc.JsonValue = jsonObj.toString(False)
        Call doc.save("""", ""default"")
    Catch
        Print ""Error "" & Error() & "" on line "" & Erl()
    Finally
        If (Not server is Nothing && server.connected) Then server.logout
    End Try
End Sub"
samples_keepvse_src_updateDocuments.txt,"%REM
 Library Collections 
 Collection and Map classes and methods
 
%END REM

'{{VSID_COPYRIGHT_NOTICE_
%REM
    Copyright HCL America, Inc. 1999, 2023

    Licensed under the Apache License, Version 2.0 (the ""License"");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an ""AS IS"" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
%END REM
'}}

Option Declare
Option Public
UseVSE ""*JsonVSE""



'{{SETI_AUTHOR_CODE_Collections_Private_Constants
'}}

'{{SETI_AUTHOR_CODE_Collections_Private_Variables
'}}

'{{SETI_AUTHOR_CODE_Collections_Private_Types
'}}

'{{SETI_AUTHOR_CODE_Collections_Private_Properties
'}}



%REM
 Class Collection 
 Base class for Collections
 
%END REM
Public Class Collection 

 '{{SETI_AUTHOR_CODE_Collection_Private_Variables
    Private m_comparator as Comparator
    Private m_contentType as String
    Private m_elementCount as Long
    Private m_hasContent as Boolean
    Private m_isLocked as Boolean
    Private m_isSorted as Boolean
    Private m_isUnique as Boolean
    Private m_suppressErrors as Boolean
    Private p_content List as Variant
    Private p_isCollReversed as Boolean
    Private p_isObjects as Boolean
    Private p_allowedContents as Variant
 '}}


 %REM
  Property comparator 
  Comparator to compare values with
 
  @return Comparator
 %END REM
 Public Property Get comparator As Comparator 
  '{{SETI_AUTHOR_CODE_Get.comparator_implementation
        Set Comparator = Me.m_comparator
  '}}

 End Property


 %REM
  Property elementCount 
  Number of elements within the Collection
 
  @return Long
 %END REM
 Public Property Get elementCount As Long 
  '{{SETI_AUTHOR_CODE_Get.elementCount_implementation
        Return Me.m_elementCount
  '}}

 End Property


 %REM
  Property isUnique 
  Flag indicating if the elements in the Collection must be unique
 
  @return Boolean
 %END REM
 Public Property Get isUnique As Boolean 
  '{{SETI_AUTHOR_CODE_Get.isUnique_implementation
        Return Me.m_isUnique
  '}}

 End Property


 %REM
  Property contentType 
  TypeName(s) of elements within the Collection
 
  @return String
 %END REM
 Public Property Get contentType As String 
  '{{SETI_AUTHOR_CODE_Get.contentType_implementation
        Return Me.m_contentType
  '}}

 End Property


 %REM
  Property isSorted 
  Flag indicating if the Collection is sorted (using Comparator object internally)
 
  @return Boolean
 %END REM
 Public Property Get isSorted As Boolean 
  '{{SETI_AUTHOR_CODE_Get.isSorted_implementation
        Return Me.m_isSorted
  '}}

 End Property


 %REM
  Property isLocked 
  Flag indicating if the Collection is locked, so adds, removes and replaces are aborted
 
  @return Boolean
 %END REM
 Public Property Get isLocked As Boolean 
  '{{SETI_AUTHOR_CODE_Get.isLocked_implementation
        Return Me.m_isLocked
  '}}

 End Property


 %REM
  Property hasContent 
  Flag indicating if the Collection has elemens
 
  @return Boolean
 %END REM
 Public Property Get hasContent As Boolean 
  '{{SETI_AUTHOR_CODE_Get.hasContent_implementation
        Me.m_hasContent = Me.ElementCount > 0

        Return Me.m_hasContent
  '}}

 End Property


 %REM
  Property isReversed 
  Flagindicating whether the Collection has been reversed
 
  @return Boolean
 %END REM
 Public Property Get isReversed As Boolean 
  '{{SETI_AUTHOR_CODE_Get.isReversed_implementation
        Return Me.p_isCollReversed
  '}}

 End Property


 %REM
  Property suppressErrors 
  Suppress errors on adding elements. Errors wll still be thrown if the Collection is locked
or attempting to insert an entry into a sorted Collection.
Instead of throwing an error, e.g. for wrong content type, the method will just return false
 
  @return Boolean
 %END REM
 Public Property Get suppressErrors As Boolean 
  '{{SETI_AUTHOR_CODE_Get.suppressErrors_implementation
        Return Me.m_suppressErrors
  '}}

 End Property


 %REM
  Property suppressErrors 
  Suppress errors on adding elements. Errors wll still be thrown if the Collection is locked
or attempting to insert an entry into a sorted Collection.
Instead of throwing an error, e.g. for wrong content type, the method will just return false
 
 %END REM
 Public Property Set suppressErrors As Boolean 
  '{{SETI_AUTHOR_CODE_Set.suppressErrors_implementation
        Me.m_suppressErrors = suppressErrors
  '}}

 End Property

 '{{SETI_AUTHOR_CODE_Collection_Private_Properties
 '}}


 %REM
  Sub New 
  Constructor
 
  @param contentType  Defines the Content Type of the Collection

  @param comparator  Comparator instance to use when checking for unique and sorting elements. If Nothing is passed, a default Comparator will be used which works for scalars, grouping numbers and comparing on data type and value

  @param mustBeUnique  Flag indicating if elements within the Collection must be unique

  @param isSorted  Flag indicating if the content within the Collection shall be sorted

 %END REM
 Public Sub New(contentType As String, comparator As Comparator, mustBeUnique As Boolean, isSorted As Boolean) 
  '{{SETI_AUTHOR_CODE_New_implementation
        Me.m_contentType = FullTrim(UCase(contentType))
        Call validateContentType()

        Me.m_isUnique = mustBeUnique
        Me.m_isSorted = isSorted
        If (comparator is Nothing) Then
            Set Me.m_comparator = New Comparator(False)
        Else
            Set Me.m_comparator = comparator
        End If
  '}}

 End Sub


 %REM
  Sub clear 
  Removes all values from the Collection and resets whether the collection is reversed.
 
  @throws Collection is locked  
 %END REM
 Public Sub clear() 
  '{{SETI_AUTHOR_CODE_clear_implementation
        Call checkLocked()

        Erase Me.p_Content
        m_elementCount = 0
        Me.p_isCollReversed = false
  '}}

 End Sub


 %REM
  Sub unlock 
  Unlocks the Collection, so add, remove, replace or reverse functions can be used again
 
 %END REM
 Public Sub unlock() 
  '{{SETI_AUTHOR_CODE_unlock_implementation
        Me.m_isLocked = False
  '}}

 End Sub


 %REM
  Sub lock 
  Locks the collection, so any add, remove, replace or reverse functions trigger errors. 
  Useful when passing a collection to other functions.
 
 %END REM
 Public Sub lock() 
  '{{SETI_AUTHOR_CODE_lock_implementation
        Me.m_isLocked = True
  '}}

 End Sub


 %REM
  Sub reverse 
  Reverses a collection
 
 %END REM
 Public Sub reverse() 
  '{{SETI_AUTHOR_CODE_reverse_implementation
        Dim newList List as Variant
        Dim execString as String
        Dim comparatorType as String
        Dim setDescending as Boolean
        Dim i as Long
        Dim count as Long

        Call checkLocked()

        If (Not me.hasContent) Then Exit Sub

        ' Create a new list, put them in reverse order
        For i = Me.ElementCount - 1 To 0 Step -1
            If (IsObject(Me.p_Content(count))) Then
                Set newList(i) = Me.p_Content(count++)
            Else
                newList(i) = Me.p_Content(count++)
            End If
        Next

        ' Erase p_Content and copy values from newList into p_Content
        Erase Me.p_Content
        ForAll elem in newList
            Call insertIntoContent(elem, ListTag(elem))
        End ForAll
        Erase newList
        Me.p_isCollReversed = Not Me.p_isCollReversed
  '}}

 End Sub


 %REM
  Sub fromJson 
  Loads the scalar values array from the JsonObject into the Collection. Can only be used for a JsonObject that contains a single array of scalars.
 
  @param jsonObj  JsonObject containig an array of scalars

  @throws A collection can only accept an array  
 %END REM
 Public Sub fromJson(jsonObj As JsonObject) 
  '{{SETI_AUTHOR_CODE_fromJson_implementation
        Call checkLocked()

        Dim array as Variant
        If (jsonObj.childCount = 0) Then Exit Sub
        If (Not jsonObj.isArray()) Then
            Error 1400, ""A collection can only accept an array""
        Else
            array = jsonObj.valueArray
            Call addArray(array)
        End If
  '}}

 End Sub


 %REM
  Sub transform 
  Transforms members of this Collection using a CollectionTransformer and adds them to the new Collection passed
 
  @param transformer  CollectionTransformer to transform members

  @param newColl  Collection to load transformed members into

 %END REM
 Public Sub transform(transformer As CollectionTransformer, newColl As Collection) 
  '{{SETI_AUTHOR_CODE_transform_implementation
        Dim i as Long
        Dim innerTransformer as CollectionTransformer

        If (Not me.hasContent) Then Exit Sub

        ' Not just best practice, this is required. We cannot re-set transformer in a function
        If (transformer is Nothing) Then
            Set innerTransformer = new CollectionTransformer()
        Else
            Set innerTransformer = transformer
        End if

        If (me.suppressErrors) Then newColl.suppressErrors = true

        Do
            Call newColl.add(innerTransformer.transform(Me.p_Content(i)))
        Loop While ++i < Me.ElementCount

        If (me.suppressErrors) Then newColl.suppressErrors = false
  '}}

 End Sub


 %REM
  Function clone 
  Creates a copy of the Collection
 
  @return Collection
 %END REM
 Public Function clone() As Collection 
  '{{SETI_AUTHOR_CODE_clone_implementation
        Dim newColl as New Collection(Me.ContentType, Me.Comparator, Me.isUnique, Me.isSorted)
        Dim i as Long

        If (Not me.hasContent) Then Return newColl

        newColl.suppressErrors = Me.suppressErrors
        If (Me.isReversed) Then newColl.reverse
        ' But don't set isLocked

        Do
            Call newColl.add(Me.p_Content(i))
        Loop While ++i < Me.ElementCount

        Return newColl
  '}}

 End Function


 %REM
  Function toJson 
  Converts the Collection to a JsonObject that's an array.
If the array values are objects, the code will try to call a toJson method on the object, otherwise skip them.
 
  @return JsonObject
 %END REM
 Public Function toJson() As JsonObject 
  '{{SETI_AUTHOR_CODE_toJson_implementation
        Dim i as Long
        Dim result as New JsonObject()
        Dim temp as JsonObject
        If (Not Me.hasContent) Then Return result
        Do
            If (IsObject(Me.p_Content(i))) Then
                Try
                    Set temp = Me.p_Content(i).toJson()
                    Call result.appendToJsonArray(temp)
                Catch

                End Try
            Else
                Call result.appendToJsonArray(Me.p_Content(i))
            End If
        Loop While ++i < Me.ElementCount
        Return result
  '}}

 End Function


 %REM
  Function getIndex 
  Checks whether the Collection contains a specific value.
 
  @param checkValue  Value to check for

  @return Variant
 %END REM
 Public Function getIndex(checkValue As Variant) As Variant 
  '{{SETI_AUTHOR_CODE_getIndex_implementation
        If (Not continueAdd(checkValue)) Then Return NULL  'Not a valid insertion value, cannot be in Collection

        Dim nextPos as long
        Dim matchPos as Long
        If (Me.isSorted) Then
            'If it's sorted, use findPosInList rather than iterating everything, then check elements either side
            nextPos = findNextPosInList(checkValue)
            Return getDupePos(checkValue, nextPos)
        Else
            ' If it's an unsorted Collection, we need to iterate
            ForAll elem in p_content
                If (Me.Comparator.equals(checkValue, elem)) Then Return ListTag(elem)
            End ForAll
        End If
        Return NULL
  '}}

 End Function


 %REM
  Function getNthElementRaw 
  Gets the nth elment as a raew variant, starting at index 0
 
  @param index  Index of the element to return

  @return Variant
 %END REM
 Public Function getNthElementRaw(index As Long) As Variant 
  '{{SETI_AUTHOR_CODE_getNthElementRaw_implementation
        'If you pass a non-existent indexed element of a List to a function it does not throw an error.
        If (index >= Me.elementCount) Then
            If (p_isObjects) Then Return Nothing Else Return
        End If

        Return p_content(index)
  '}}

 End Function


 %REM
  Function getAndRemoveLastRaw 
  Returns the LAST element in the collection and removes it from the collection.
If the collection is empty it just exits the function
 
  @return Variant
  @throws Collection is locked  
 %END REM
 Public Function getAndRemoveLastRaw() As Variant 
  '{{SETI_AUTHOR_CODE_getAndRemoveLastRaw_implementation
        Dim tempVal as Variant
        Call checkLocked()

        If (Not Me.hasContent) Then
            If (p_isObjects) Then Return Nothing Else Return
        End If

        If (IsObject(p_Content(ElementCount - 1))) Then
            Set tempVal = p_Content(Me.ElementCount - 1)
        Else
            tempVal = p_Content(Me.ElementCount - 1)
        End If

        Erase p_content(Me.ElementCount - 1)
        m_elementCount--
        Return tempVal
  '}}

 End Function


 %REM
  Function getAndRemoveFirstRaw 
  Returns the FIRST element in the collection and removes it from the collection.
If the collection is empty it just exits the function
 
  @return Variant
  @throws Collection is locked  
 %END REM
 Public Function getAndRemoveFirstRaw() As Variant 
  '{{SETI_AUTHOR_CODE_getAndRemoveFirstRaw_implementation
        Dim tempVal as Variant
        Call checkLocked()

        If (Not Me.hasContent) Then
            If (p_isObjects) Then Return Nothing Else Return
        End If

        If (IsObject(p_content(""0""))) Then
            Set tempVal = p_content(""0"")
        Else
            tempVal = p_content(""0"")
        End If

        If (Me.ElementCount > 1) Then
            Dim i as Long

            Erase Me.p_Content(""0"")
            For i = 1 To (Me.ElementCount - 1)
                Call insertIntoContent(Me.p_Content(i), (i - 1))
            Next
        Else
            Erase Me.p_Content(""0"")
        End If
        m_elementCount--
        Return tempVal
  '}}

 End Function


 %REM
  Function join 
  Joins a collection of scalar values into a single string response separated by a passed delimiter
 
  @param delim  Delimiter to separate values

  @return String
 %END REM
 Public Function join(delim As String) As String 
  '{{SETI_AUTHOR_CODE_join_implementation
        Dim content as String
        Dim i as Integer

        If (Not Me.hasContent) Then Return """"

        For i = 0 to Me.ElementCount - 1
            Try
                content = content & Me.p_Content(i) & delim
            Catch
                content = content & ""NOT STRINGABLE"" & delim
            End Try
        Next

        Return Left(content, Len(content) - 1)
  '}}

 End Function


 %REM
  Function contains 
  Checks whether the Collection contains a specific value. Requires a valid Comparator to compare each element.
 
  @param checkValue  Value to check for

  @return Boolean
 %END REM
 Public Function contains(checkValue As Variant) As Boolean 
  '{{SETI_AUTHOR_CODE_contains_implementation
        If (Not continueAdd(checkValue)) Then Return False  'Not a valid insertion value, cannot be in Collection

        Dim possiblePos as Variant
        possiblePos = getIndex(checkValue)
        Return Not isNull(possiblePos)
  '}}

 End Function


 %REM
  Function remove 
  Removes an element (or elements, if not unique) from the Collection. Returns the number of elements removed.
 
  @param source  Element to remove

  @param allMatches  Whether to remove all elements that match source or just the first match

  @return Long
  @throws Collection is locked  
 %END REM
 Public Function remove(source As Variant, allMatches As Boolean) As Long 
  '{{SETI_AUTHOR_CODE_remove_implementation
        Dim i as Long
        Dim tempSize as Long
        Dim returnVal as Long
        Dim elem as Variant
        Dim removeCounter as Long
        Dim matchRemoved as Boolean
        tempSize = 0

        Call checkLocked()

        If (Not Me.hasContent) Then Exit Function

        ' We need to iterate the whole collection, because values subsequent to those removed will need shunting back down
        For i = 0 to (Me.ElementCount - 1)
            If (shouldAdd(matchRemoved, source, Me.p_Content(i))) Then
                ' This is not a value to remove
                If (i > tempSize) Then
                    ' i.e. we have removed something, so we need to shunt the values back down
                    Call insertIntoContent(Me.p_Content(i), tempSize)
                    Erase Me.p_Content(i)
                End If
                tempSize++ ' Running count of new m_elementCount
            Else
                ' Remove value, increment count of removed, and set matchRemoved to True if we are not removing all matches
                Erase Me.p_Content(i)
                removeCounter++
                If Not allMatches Then matchRemoved = True
            End If
        Next
        Me.m_elementCount = tempSize
        Return removeCounter
  '}}

 End Function


 %REM
  Function filter 
  Filters a collection using a CollectionFilter and returns a new ""filtered"" collection
 
  @param filterObj  Collection filter to check each value with

  @return Collection
 %END REM
 Public Function filter(filterObj As CollectionFilter) As Collection 
  '{{SETI_AUTHOR_CODE_filter_implementation
        Dim newColl as New Collection(Me.ContentType, Me.Comparator, Me.isUnique, Me.isSorted)
        Dim innerFilter as CollectionFilter
        Dim i as Long

        If (Not Me.hasContent) Then Return newColl

        ' Not just best practice, this is required. We cannot re-set filterObj in a function
        If (filterObj is Nothing) Then
            Set innerFilter = new CollectionFilter
        Else
            Set innerFilter = filterObj
        End If

        If (me.suppressErrors) Then newColl.suppressErrors = true

        Do
            If (innerFilter.filter(Me.p_Content(i))) Then
                Call newColl.add(Me.p_Content(i))
            End If
        Loop While ++i < Me.ElementCount

        If (me.suppressErrors) Then newColl.suppressErrors = False

        Return newColl
  '}}

 End Function


 %REM
  Function add 
  Adds an element to the container
 
  @param source  Must match Collection's ContentType

  @return Long
  @throws This collection can only accept *ContentType*, passed value is *passedType*  if source is different to ContentType

  @throws Collection is locked  
 %END REM
 Public Function add(source As Variant) As Long 
  '{{SETI_AUTHOR_CODE_add_implementation
        Call checkLocked()
        Dim checkIndex as Variant

        Try
            If Not continueAdd(source) Then Return -1

            If (Me.isSorted) Then
                Return insertSorted(source)
            Else
                If (Me.isUnique) Then
                    checkIndex = Me.getIndex(source)
                    If (Not IsNull(checkIndex)) Then Return checkIndex
                End If
                Call insertIntoContent(source, m_elementCount++)
                Return m_elementCount - 1
            End If
        Catch
            If Not Me.suppressErrors Then Error Err, Error$
        End Try
  '}}

 End Function


 %REM
  Function addAll 
  Adds all elements from an array or source Collection to the current Collection.
 
  @param source  Variant array or Collection of elements matching the Collection's ContentType

  @return Collection
  @throws This collection can only accept *ContentType*, passed value is *passedType*  if source is different to ContentType

  @throws Collection is locked  
 %END REM
 Public Function addAll(source As Variant) As Collection 
  '{{SETI_AUTHOR_CODE_addAll_implementation
        Dim origList as Variant
        Dim origElemCount as Long
        Call checkLocked()

        origList = Me.p_Content
        origElemCount = Me.elementCount

        Try
            If (IsObject(source)) Then
                Call addCollection(source)
            Else
               Call addArray(source)
            End If
        Catch
            ' Reset collection
            Erase p_Content
            ForAll elem in origList
                If (IsObject(elem)) Then
                    Set p_Content(ListTag(elem)) = elem
                Else
                    p_Content(ListTag(elem)) = elem
                End If
            End ForAll
            m_elementCount = origElemCount
            ' add has already checked suppressErrors
            Error Err, Error$
        End Try
        Return Me
  '}}

 End Function


 %REM
  Function replace 
  Replaces an element with another and returns the number of replacements made.
If the Collection is unsorted, replacements are made at the same positions.
If the Collection is sorted, the old elements are removed and new ones inserted at the appropriate sorted location.
 
  @param oldValue  Value to replace

  @param newValue  Value to insert

  @param allMatches  Whether to replace the first match or all matches

  @return Long
  @throws Collection is locked  
 %END REM
 Public Function replace(oldValue As Variant, newValue As Variant, allMatches As Boolean) As Long 
  '{{SETI_AUTHOR_CODE_replace_implementation
        Dim i as Long
        Dim j as Long
        Dim replaceCounter as Long
        Dim tmpColl as New Collection(Me.contentType, Me.comparator, Me.isUnique, Me.isSorted)

        Call checkLocked()

        If (Not Me.hasContent) Then Exit Function

        If (Not continueAdd(newValue)) Then Return 0

        If (Me.isSorted) Then
            ' Replace for sorted collections = remove then add for each removed
            i = Me.remove(oldValue, allMatches)
            For j = 0 to i - 1
                If add(newValue) Then replaceCounter++
            Next
        Else
            ' Otherwise iterate all, if it's a match, replace that element
            Do
                If (Me.Comparator.equals(oldValue, Me.p_Content(i))) Then
                    Call insertIntoContent(newValue, i)
                    replaceCounter++
                    If (Not allMatches) Then Return replaceCounter
                End If
            Loop While ++i < Me.ElementCount
        End If
        Return replaceCounter
  '}}

 End Function


 %REM
  Function insertAt 
  Inserts an element in the collection at an index, starting at index 0. Not allowed for sorted collections
 
  @param source  Must match Collection's ContentType

  @param index  Index at which to insert the element

  @return Boolean
  @throws insertAt not allowed for sorted collections  
  @throws Collection is locked  
  @throws Collection is smaller than required position to insert at  
 %END REM
 Public Function insertAt(source As Variant, index As Long) As Boolean 
  '{{SETI_AUTHOR_CODE_insertAt_implementation
        Call checkLocked()

        Dim i as Long
        Dim temp as Variant

        If (Me.isSorted) Then
            Error 1403, ""insertAt is not allowed for sorted collections""
        End If

        Try
            If Not continueAdd(source) Then Exit Function

            If (index > Me.ElementCount) Then
                Error 1501, ""Collection is smaller than required position to insert at: collection size "" & Me.ElementCount - 1 & "", requested index "" & index
            End If

            ' Do not do a ForAll loop on a collection you're modifying!
            If (index < Me.ElementCount) Then
                For i = Me.ElementCount To index Step -1
                    Call insertIntoContent(p_Content(i - 1), i)
                Next
            End If

            Call insertIntoContent(source, index)

            m_elementCount ++
            Return True
        Catch
            If Not Me.suppressErrors Then Error Err, Error$
        End Try
  '}}

 End Function

 '{{SETI_AUTHOR_CODE_Collection_Private_Methods

    %REM
        Destructor
    %END REM
    Sub Delete
        Erase Me.p_Content
    End Sub

    %REM
        Adds a collection to this Collection.
        @param source           Element to insert
    %END REM
    Private Sub addCollection(source as Variant)
        Dim idex as Long
        Dim passedColl as Collection

        Set passedColl = source
        If (Not passedColl.hasContent) Then Exit Sub

        Do
            Call Me.add(passedColl.getNthElementRaw(idex))
        Loop While ++idex < passedColl.elementCount
    End Sub

    %REM
        Adds an array to this Collection.
        @param source           Element to insert
    %END REM
    Private Sub addArray(source as Variant)
        Dim actualType as String
        Dim idex as Integer

        If (Not IsArray(source)) Then
            Error 1400, ""Source must be an array, passed "" & TypeName(source)
        End If

        For idex = 0 To UBound(source)
            Me.add(source(idex))
        Next

    End Sub

    %REM
        Throws an error if the collection is locked
    %END REM
    Private Sub checkLocked()
        If Me.isLocked Then Error 1403, ""Collection is locked""
    End Sub

    %REM
        Checks whether the incoming value is not an empty Variant, checks content type and checks for dupes
    %END REM
    Private Function continueAdd(source as Variant) as Boolean
        Dim actualType as String
        actualType = TypeName(source)
        If (Me.m_contentType = ""SCALAR"") Then
            If (Not isScalar(source)) Then Error 1400, |This collection can only accept SCALARS, passed value is | & actualType
            If (isEmpty(source)) Then Error 1400, |This collection can only accept SCALARS, passed value is | & actualType
        ElseIf (Me.m_contentType = ""OBJECT"") Then
            If (Not isObject(source)) Then Error 1400, |This collection can only accept OBJECTS, passed value is | & actualType
            If (source is Nothing) Then Error 1400, |This collection can only accept SCALARS, passed value is NOTHING|
        Else
            ForAll ct in Me.p_allowedContents
                If (actualType = ct) Then
                    Return True
                End If
            End ForAll
            Error 1400, |This collection can only accept | & Me.m_contentType & |, passed value is | & actualType
        End If

        Return true
    End Function

    %REM
        Because we don't have OrElse. Used by remove()
        When we have OrElse, we can do:
        ' If (matchRemoved = True OrElse Me.m_comparator.compare(source, elem) <> 0) Then
    %END REM
    Private Function shouldAdd(matchRemoved as Boolean, source as Variant, elem as Variant) as Boolean
        Return (matchRemoved = True) || (Not Me.Comparator.equals(source, elem))
    End Function

    %REM
        Finds the position to insert a value into the Collection's content
        @param source           To insert into the List
        @return position       Where the element should be inserted
    %END REM
    Private Function findNextPosInList(source as Variant) as Long
        Dim interval As Long
        Dim idxLeft As Long
        Dim pos As Long
        Dim idxRight As Long
        Dim divisor As Integer
        Dim tmp As Variant
        Dim chunkFound as Boolean
        Dim intervalLoops as Integer

        ' No entries...put at element 0
        If (Not Me.hasContent) Then Return 0

        ' Before first entry...put at element 0
        If (Me.Comparator.compareAscDesc(source, Me.p_Content(0), Me.p_isCollReversed) = -1) Then Return 0

        ' After last entry, put at end of collection
        If (Me.Comparator.compareAscDesc(source, Me.p_Content(Me.ElementCount - 1), Me.p_isCollReversed) = 1) Then Return Me.ElementCount

        ' Chunking on quarters seems to work best on performance
        divisor = 4
        While (interval < ((Me.ElementCount - 1) / divisor))
            interval = (divisor * interval) + 1
        Wend

        %REM
            1. Chunk the collection into quarters (interval is mnumber of elements in the chunk).
            2. Find which quarter it should go in.
            3. Chunk that chunk into quarters.
            4. Repeat 2 and 3 until interval has been reduced to 0 <- we've found the exact position.
            - idxLeft = first entry in chunk, idxRight = last entry in that chunk, pos = place to put it
        %END REM
        idxLeft = 0
        idxRight = Me.ElementCount - 1
        While (interval > 0)
            chunkFound = false   'Reset
            intervalLoops = 0
            pos = idxLeft + interval
            Do While pos < idxRight
                intervalLoops++
                If (IsObject(Me.p_Content(pos))) Then
                    Set tmp = Me.p_Content(pos)
                Else
                    tmp = Me.p_Content(pos)
                End If
                ' Test against first entry in that chunk <- should it go before that entry
                If (Me.Comparator.compareAscDesc(source, tmp, Me.p_isCollReversed) = -1) Then
                    chunkFound = true
                    If (pos > interval Or Me.Comparator.isDescending) Then
                        idxLeft = pos - interval
                    End If
                    idxRight = pos + 1
                    Exit Do
                End If
                pos = pos + interval
            Loop
            If (Not chunkFound) Then
                idxLeft = pos - interval
            End If
            'Print ""Interval "" & interval & "": intervalLoops - "" & intervalLoops & "", idxLeft - "" & idxLeft & "", idxRight - "" & idxRight
            interval = (interval - 1) / divisor
        WEnd

        Return pos

    End Function

    Private Function getDupePos(checkValue as Variant, pos as Long) as Variant
        Dim prevPos as Long
        If (pos => Me.m_elementCount) Then Return NULL

        If (pos < Me.elementCount) Then
            If (Me.Comparator.equals(checkValue, Me.p_Content(pos))) Then Return pos
        End If

        If (pos > 0) Then
            prevPos = pos - 1
            While (prevPos > -1 && Me.Comparator.compare(checkValue, Me.p_Content(prevPos)) > -1)
                If Me.Comparator.equals(checkValue, Me.p_Content(prevPos)) Then Return prevPos
                prevPos --
            Wend
        End If

        Return NULL
    End Function

    %REM
        Inserts an element into a sorted list at the relevant position
        @param source           To insert into the List
    %END REM
    Private Function insertSorted(source as Variant) as Boolean
        Dim pos as Long
        Dim i as Long
        Dim checkIndex as Variant

        If (Not Me.hasContent) Then
            Call insertIntoContent(source, m_elementCount++)
            Return 0
        End If

        pos = findNextPosInList(source)

        If (Me.isUnique) Then
            checkIndex = getDupePos(source, pos)
            If (Not IsNull(checkIndex)) Then Return checkIndex
        End If

        If (pos = Me.ElementCount) Then
            Call insertIntoContent(source, Me.ElementCount)
        Else
            ' Do not do a ForAll loop on a collection you're modifying!
            For i = (Me.ElementCount - 1) to pos Step -1
                Call insertIntoContent(Me.p_Content(i), i+1)
            Next
            Call insertIntoContent(source, pos)
        End If
        m_elementCount++
        Return m_elementCount - 1

    End Function

    %REM
        Adds a value to the p_Content array, handling needing to use ""Set"" for objects
    %END REM
    Private Sub insertIntoContent(sourceObj as Variant, index as Long)
        If (Me.p_isObjects) Then
            Set Me.p_Content(index) = sourceObj
        Else
            Me.p_Content(index) = sourceObj
        End If
    End Sub

    %REM
        Ensures content types being passed into New function are valid
    %END REM
    Function validateContentType() as Boolean

        Dim isOneScalar as Boolean

        If (Me.m_ContentType = """") Then Error 1400, ""contentType should be a comma-delimited string of one or more explicit datatypes, or SCALAR or OBJECT""
        Me.p_allowedContents = Split(Me.m_contentType, "","")

        ForAll ct in Me.p_allowedContents
            Select Case ct
            Case ""NULL"",""EMPTY"",""VARIANT"",""NOTHING"",""ARRAY"",""LIST"":
                Error 1400, ""Invalid data type for Collection: "" & ct
            Case ""SCALAR"":
                If (UBound(Me.p_allowedContents) > 0) Then Error 1400, ""SCALAR cannot be mixed with other datatypes""
            Case ""STRING"",""INTEGER"",""LONG"",""SINGLE"",""DOUBLE"",""CURRENCY"",""DATE/TIME"",""BO"
samples_keepvse_test_integrationTests.txt,"%REM
	Copyright 2023 HCL America, Inc.
	Licensed under the Apache License, Version 2.0 (the ""License"");
	you may not use this file except in compliance with the License.
	You may obtain a copy of the License at

	http://www.apache.org/licenses/LICENSE-2.0

	Unless required by applicable law or agreed to in writing,
	software distributed under the License is distributed on an ""AS IS"" BASIS,
	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	See the License for the specific language governing permissions and limitations under the License
%END REM

Option Declare
Option Public

Use ""../libs/functions""
Use ""../libs/VoltScriptTesting""

Sub Initialize()

    Dim testRunner as New TestRunner(""Domino REST API Tests"")
    Dim server as New KeepServer()

    Try
        Call runBasicKeepTests(testRunner, server)
    Catch
        Print ""Error "" & Error() & "" on line "" & Erl()
    Finally
        If (Not server is Nothing && server.connected) Then server.logout
    End Try

End Sub

Function runBasicKeepTests(testRunner as TestRunner, server as KeepServer) as Boolean

    Dim testSuite as New TestSuite(""Server tests"")
    Call testRunner.addTestSuite(testSuite)

    Call testSuite.describe(""Check servername set"").assertNotEqualString("""", SERVER_NAME)
    Call testSuite.describe(""Check username set"").assertNotEqualString("""", Environ$(USERNAME_ENVVAR))
    Call testSuite.describe(""Check password set"").assertNotEqualString("""", Environ$(USERPASSWORD_ENVVAR))

    If Not testSuite.ranSuccessfully Then Return False

    ' Uses environment variables KEEP_USERNAME and KEEP_PASSWORD
    Call login(server, SERVER_NAME, Environ$(USERNAME_ENVVAR), Environ$(USERPASSWORD_ENVVAR))
    Call testSuite.describe(""Check login successful"").assertTrue(server.Connected)

    Return testSuite.ranSuccessfully()

End Function"
samples_language_libs_functions.txt,"%REM
	Copyright 2023 HCL America, Inc.
	Licensed under the Apache License, Version 2.0 (the ""License"");
	you may not use this file except in compliance with the License.
	You may obtain a copy of the License at

	http://www.apache.org/licenses/LICENSE-2.0

	Unless required by applicable law or agreed to in writing,
	software distributed under the License is distributed on an ""AS IS"" BASIS,
	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	See the License for the specific language governing permissions and limitations under the License
%END REM

Option Declare
Option Public

%REM
    Catches a Type Mismatch (13) error
%END REM
Function catch13Error()
    Dim value as String

    value = ""Hello world""
    Try
        If (value = true) Then
            Print ""value is a boolean true""
        End If
    Catch Error 13
        Print ""Type Mismatch - value is not a boolean""
    End Try
End Function

%REM
    Catches any error code
%END REM
Sub catchError()
    Try
        Error 22
    Catch
        Print ""Catch "" & Err() & "" on line "" & Erl()
    End Try
End Sub

%REM
    If true is passed, throws an error and return ""Failure"", else returns ""Success""
%END REM
Function tryCatchExit(throwError as boolean) as String
    Try
        If (throwError) Then Error 400, ""You wanted an error""
        Return ""Success""
    Catch
        Print ""Error "" & Error() & "" on line "" & Erl()
        Return ""Failure""
    End Try
End Function

%REM
    Returns a stack trace. If true is passed, `getStack` will appear twice, otherwise once
%END REM
Function getStack(recurse as Boolean) as String
    If (recurse) Then
        Return getStack(false)
    Else
        Print GetThreadInfo(12)
        Return GetThreadInfo(12)
    End If
End Function

%REM
    Showing that Finally block is triggered before branching out of Try and Catch
%END REM
Function doFinally(throwError as Boolean) As String
    Try
        If (throwError) Then Error 400, ""You wanted an error""
        Return ""Success""
    Catch
        Print ""Error "" & Error() & "" on line "" & Erl()
        Return ""Failure""
    Finally
        Print ""NOTE: Running in finally""
    End Try
End Function

%REM
    Shows nested Try/Catch blocks
%END REM
Function nestTC(error1 as Boolean, error2 as Boolean) as Integer
    Try
        If (error1) Then Error 400, ""You wanted an outer error""
        Print ""Outer success""
        Return 1
    Catch
        Print ""Error "" & Error() & "" on line "" & Erl()
        Try
            If (error2) Then Error 401, ""You wanted an inner error""
            Print ""Inner success""
            Return 2
        Catch
            Print ""Error "" & Error() & "" on line "" & Erl()
            Return 3
        End Try
    End Try
End Function

%REM
    Example of printing an array element and incrementing
%END REM
Sub loopArray(passedArr as Variant)
    Dim i as Integer
    While i <= UBound(passedArr)
        Print passedArr(i++)
    Wend
End Sub

%REM
    Same as above, but increment in Do instruction
%END REM
Sub loopArrayDo(passedArr as Variant)
    Dim i as Integer
    Do
        Print passedArr(i)
    Loop Until ++i > UBound(passedArr)
End Sub

%REM
    Same as above, but increment in Do instruction
%END REM
Sub loopArrayDoPostfix(passedArr as Variant)
    Dim i as Integer
    Do
        Print passedArr(i)
    Loop Until i++ = UBound(passedArr)
End Sub

%REM
    Prints an array element up to the second ""the""
%END REM
Sub loopArrayExitThe(passedArr as Variant)
    Dim i as Integer
    Dim the as Integer
    Do Until i > UBound(passedArr)
        If (LCase(passedArr(i)) = ""the"") Then
            If the++ > 0 Then Exit Do
        End If
        Print passedArr(i++)
    Loop
End Sub"
samples_language_libs_logicalFunctions.txt,"%REM
	Copyright 2023 HCL America, Inc.
	Licensed under the Apache License, Version 2.0 (the ""License"");
	you may not use this file except in compliance with the License.
	You may obtain a copy of the License at

	http://www.apache.org/licenses/LICENSE-2.0

	Unless required by applicable law or agreed to in writing,
	software distributed under the License is distributed on an ""AS IS"" BASIS,
	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	See the License for the specific language governing permissions and limitations under the License
%END REM

Option Declare
Option Public

%REM
    Class used for following functions
%END REM
Class Student
    Public ID As Long
    Public Name As String
    Public Score As String
End Class

%REM
    Demonstrates how traditional ""Or"" fails with Object Variable Not Set
%END REM
Sub orFail()
    Dim obj as Student
    If (obj is Nothing Or obj.Name != """") Then
        Print ""Student not initialized""
    End If
End Sub

%REM
    Short-circuits logical expressions, skipping through
%END REM
Function orSuccess as String
    Dim obj as Student
    If (obj is Nothing || obj.Name != """") Then
        Print ""Student not initialized""
    End If
    Return ""Success""
End Function

%REM
    Demonstrates how traditional ""And"" fails with Type Mismatch
%END REM
Sub andFail()
    Dim obj as New Student
    If (obj.Name != """" And obj.Score > 90) Then
        Print ""High-score valid student""
    End If
End Sub

%REM
    Short-circuits logical expressions, skipping through
%END REM
Function andSuccess as String
    Dim obj as New Student
    If (obj.Name != """" && obj.Score > 90) Then
        Print ""High-score valid student""
    End If
    Return ""Success""
End Function"
samples_language_src_loop.txt,"%REM
	Copyright 2023 HCL America, Inc.
	Licensed under the Apache License, Version 2.0 (the ""License"");
	you may not use this file except in compliance with the License.
	You may obtain a copy of the License at

	http://www.apache.org/licenses/LICENSE-2.0

	Unless required by applicable law or agreed to in writing,
	software distributed under the License is distributed on an ""AS IS"" BASIS,
	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	See the License for the specific language governing permissions and limitations under the License
%END REM

Option Declare
Option Public

Use ""../libs/functions""

Sub Initialize
    Dim arr as Variant
    arr = Split(""The quick brown fox jumps over the lazy dog"")
    Print ""Looping array with While""
    Call loopArray(arr)

    Print """"
    Print ""Looping with pre-fix increment""
    Call loopArrayDo(arr)

    Print """"
    Print ""Looping with post-fix increment""
    Call loopArrayDoPostfix(arr)

    Print """"
    Print ""Looping with Exit Do""
    Call loopArrayExitThe(arr)
End Sub"
samples_language_src_main.txt,"%REM
	Copyright 2023 HCL America, Inc.
	Licensed under the Apache License, Version 2.0 (the ""License"");
	you may not use this file except in compliance with the License.
	You may obtain a copy of the License at

	http://www.apache.org/licenses/LICENSE-2.0

	Unless required by applicable law or agreed to in writing,
	software distributed under the License is distributed on an ""AS IS"" BASIS,
	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	See the License for the specific language governing permissions and limitations under the License
%END REM

Option Declare
Option Public
Use ""../libs/functions""

Sub Initialize

    Call catch13Error()
    Call catchError
    Print doFinally(True)
    Print doFinally(False)

End Sub"
samples_language_test_unittests.txt,"%REM
	Copyright 2023 HCL America, Inc.
	Licensed under the Apache License, Version 2.0 (the ""License"");
	you may not use this file except in compliance with the License.
	You may obtain a copy of the License at

	http://www.apache.org/licenses/LICENSE-2.0

	Unless required by applicable law or agreed to in writing,
	software distributed under the License is distributed on an ""AS IS"" BASIS,
	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	See the License for the specific language governing permissions and limitations under the License
%END REM

Option Declare
Option Public

Use ""../libs/functions""
Use ""../libs/logicalFunctions""
Use ""../libs/VoltScriptTesting""

Sub Initialize

    Dim testRunner as New testRunner(""Language tests"")
    Dim result as Boolean

    result = errorTests(testRunner)
    result = result And logicalTests(testRunner)

    If result Then Print ""TESTS SUCCESSFUL"" Else Print ""TESTS UNSUCCESSFUL""

End Sub

Function errorTests(testRunner as TestRunner) as Boolean

    Dim testSuite as New TestSuite(""Error Tests"")
    Call testRunner.addTestSuite(testSuite)
    Dim splitStack as Variant
    Call testSuite.describe(""Test try exit success"")._
        assertEqualsString(""Success"", tryCatchExit(False), True)
    Call testSuite.describe(""Test catch exit success"")._
        assertEqualsString(""Failure"", tryCatchExit(True), True)

    splitStack = FullTrim(Split(getStack(false), Chr(10)))
    Call testSuite.describe(""Test get stack without recursion"")._
        assertEqualsInteger(2, UBound(splitStack))
    splitStack = FullTrim(Split(getStack(true), Chr(10)))
    Call testSuite.describe(""Test get stack with recursion"")._
        assertEqualsInteger(3, UBound(splitStack))

    Call testSuite.describe(""Test nested no error"").assertEqualsInteger(1, nestTC(false, False))
    Call testSuite.describe(""Test nested outer error"").assertEqualsInteger(2, nestTC(True, False))
    Call testSuite.describe(""Test nested inner error"").assertEqualsInteger(3, nestTC(True, True))

    Return testSuite.ranSuccessfully()
End Function

Function logicalTests(testRunner as TestRunner) as Boolean
    Dim testSuite as New TestSuite(""Logical Tests"")
    Call testRunner.addTestSuite(testSuite)

    Call testSuite.describe(""Check traditional Or fails"")
    Try
        Call orFail()
        Call testSuite.addResult(False, ""Or should have thrown an error"")
    Catch
        Call testSuite.addResult(True, """")
    End Try
    Call testSuite.describe(""Test ||"").assertEqualsString(""Success"", orSuccess(), True)
    Call testSuite.describe(""Check traditional And fails"")
    Try
        Call andFail()
        Call testSuite.addResult(False, ""And should have thrown an error"")
    Catch
        Print Error()
        Call testSuite.addResult(True, """")
    End Try
    Call testSuite.describe(""Test &&"").assertEqualsString(""Success"", andSuccess(), True)

    Return testSuite.ranSuccessfully()
End Function"
samples_platform_libs_dir.txt,"%REM
	Copyright 2023 HCL America, Inc.
	Licensed under the Apache License, Version 2.0 (the ""License"");
	you may not use this file except in compliance with the License.
	You may obtain a copy of the License at

	http://www.apache.org/licenses/LICENSE-2.0

	Unless required by applicable law or agreed to in writing,
	software distributed under the License is distributed on an ""AS IS"" BASIS,
	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	See the License for the specific language governing permissions and limitations under the License
%END REM

Option Declare
Option Public

UseVSE ""*OSUtilsVSE""

%REM
    Check whether a path is a directory
%END REM
Function checkIsDir(filePath as String)
    Dim OSUtils as New OSUtils
    Return OSUtils.isDirectory(filePath)
End Function

%REM
    Use PathUtils to build a path to a directory
%END REM
Function buildFooBarPath() as String
    Dim OSUtils as New OSUtils()
    Dim pathUtils as New PathUtils()

    Call pathUtils.addToPath(OSUtils.tempDir)
    Call pathUtils.addToPath(""foo"")
    Call pathUtils.addToPath(""bar"")
    Return pathUtils.toString
End Function

%REM
    Use PathUtils to build a path to a file
%END REM
Function buildFooTestFilePath() as String
    Dim OSUtils as New OSUtils()
    Dim pathUtils as New PathUtils()

    Call pathUtils.addToPath(OSUtils.tempDir)
    Call pathUtils.addToPath(""foo"")
    Call pathUtils.addToPath(""test.txt"")
    Return pathUtils.toString
End Function

%REM
    Check whether a path is a file
%END REM
Function checkIsFile(fileName as String) as Boolean
    Dim OSUtils as New OSUtils()
    Return OSUtils.isFile(fileName)
End Function

%REM
    Create directories
%END REM
Function makeDirectories(filePath as String) as Boolean
    Dim OSUtils as New OSUtils()
    Return osUtils.makeDirectories(filePath)
End Function

%REM
    Remove directories and any files within it
%END REM
Function removeDirectories(filePath as String) as Boolean
    Dim OSUtils as New OSUtils()
    Return OSUtils.removeDir(filePath, true)
End Function

%REM
    Gets files in a directory as a string array
%END REM
Function getFiles(filePath as String) as Variant
    Dim OSUtils as New OSUtils()
    Return OSUtils.getFilesInDir(filePath)
End Function

%REM
    This will return the directory the script is running from, not the directory of this script
%END REM
Function getCurrentWorkingDirectory() as String
    Return CurDir
End Function"
samples_platform_libs_envVars.txt,"%REM
	Copyright 2023 HCL America, Inc.
	Licensed under the Apache License, Version 2.0 (the ""License"");
	you may not use this file except in compliance with the License.
	You may obtain a copy of the License at

	http://www.apache.org/licenses/LICENSE-2.0

	Unless required by applicable law or agreed to in writing,
	software distributed under the License is distributed on an ""AS IS"" BASIS,
	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	See the License for the specific language governing permissions and limitations under the License
%END REM

Option Declare
Option Public

UseVSE ""*OSUtilsVSE""

%REM
    Get home dir using explicit environment variable
%END REM
Function getHomeDirTraditional() as String
    Dim platform as String
    Dim envVar as String
    Dim homeDir as String

    platform = GetThreadInfo(13)
    Select Case platform
    Case ""W64"":
        envVar = ""USERPROFILE""
    Case ""LINX"":
        envVar = ""HOME""
    Case Else
        Error 1001, ""Unexpected platform - "" & platform
    End Select

    Return Environ$(envVar)
End Function

%REM
    Get Home directory from OSItils
%END REM
Function getHomeDirOSEnvironment() as String
    Dim OSUtils as New OSUtils()
    Dim platform as String
    Dim envVar as String
    Dim homeDir as String

    platform = OSUtils.platform
    Select Case platform
    Case ""Windows64"":
        envVar = ""USERPROFILE""
    Case ""LINUX"":
        envVar = ""HOME""
    Case Else
        Error 1001, ""Unexpected platform - "" & platform
    End Select

    Return OSUtils.getEnvironment(envVar)
End Function

%REM
    Get Home directory using property
%END REM
Function getHomeDirOSProperty() as String
    Dim OSUtils as New OSUtils()

    Return OSUtils.homeDir
End Function

%REM
    Get Temp directory using property
%END REM
Function getTempDir() as String
    Dim OSUtils as New OSUtils()

    Return OSUtils.tempDir
End Function

%REM
    Set an environment variable
%END REM
Sub setEnvironmentVariable()
    Dim OSUtils as New OSUtils()

    Call OSUtils.setEnvironment(""VOLTSCRIPT_HELLO"",""Hello World"")
End Sub"
samples_platform_libs_stream_zip.txt,"%REM
	Copyright 2023 HCL America, Inc.
	Licensed under the Apache License, Version 2.0 (the ""License"");
	you may not use this file except in compliance with the License.
	You may obtain a copy of the License at

	http://www.apache.org/licenses/LICENSE-2.0

	Unless required by applicable law or agreed to in writing,
	software distributed under the License is distributed on an ""AS IS"" BASIS,
	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	See the License for the specific language governing permissions and limitations under the License
%END REM

Option Declare
Option Public

UseVSE ""*StreamVSE""
UseVSE ""*ZipVSE""

%REM
    Creates or opens a file using UTF-8 character encoding
%END REM
Function createOpenFile(stream as Stream, filePath as String) as Boolean
    Try
        Call stream.open(filePath, ""UTF-8"")
        Return True
    Catch
        Print ""Error "" & Error() & "" on line "" & Erl()
        Return False
    End Try
End Function

%REM
    Write text to a file, ending the text with a line feed.
    It also then appends an additional line feed.
%END REM
Function writeToFile(stream as Stream, text as String) as Boolean
    Call stream.writeText(text, EOL_LF)
    call stream.writeNewLine(EOL_LF)
End Function

%REM
    Reads text line-by-line, building up the complete text.
    NOTE: line feed (Chr(10)) needs to be manually added
%END REM
Function readFromFile(stream as Stream) as String
    Dim retVal as String
    While Not stream.isEOS
        retVal = retVal & stream.readText(True, EOL_ANY) & Chr(10)
    Wend
    Return retVal
End Function

%REM
    Reads the whole file, including line feeds
%END REM
Function readWholeFile(stream as Stream) as String
    Return stream.readText()
End Function

%REM
    Create a zip archive specifying files explicitly
%END REM
Function createZipAdd(dirPath as String) as ZipArchive
    Dim zip as New ZipArchive()
    ChDir dirPath
    Call zip.createArchive(""zip1.zip"", """", True)
    Call zip.addFile(""test1.txt"", """")
    Call zip.addFile(""test2.txt"", """")
    Return zip
End Function

%REM
    Create a zip archive using a wildcard spec
%END REM
Function createZipSpec(dirPath as String) as ZipArchive
    Dim zip as New ZipArchive()
    ChDir dirPath
    Call zip.createArchive(""zip2.zip"", """", True)
    Call zip.addFiles(CurDir, ""*.txt"")
    Return zip
End Function

%REM
    Creatng a zip archive using an array of filenames
%END REM
Function createZipArray(dirPath as String) as ZipArchive
    Dim zip as New ZipArchive()
    ChDir dirPath
    Dim files(1) as String
    files(0) = ""test1.txt""
    files(1) = ""test2.txt""
    Call zip.createArchive(""zip3.zip"", """", True)
    Call zip.addFileList(CurDir, files)
    Return zip
End Function

%REM
    Extracts all files from a zip
%END REM
Function extractZip(dirPath as String)
    Dim zip as New ZipArchive()
    Call zip.openArchive(dirPath & ""/zip1.zip"")
    Call zip.extractAllFiles(dirPath & ""/zip1"", False, True)
End Function

%REM
    Extracts all files from a zip
%END REM
Function extractZipEachFile(dirPath as String)
    Dim zip as New ZipArchive()
    Dim file as ZipFile

    ChDir DirPath
    Call zip.openArchive(""zip1.zip"")
    Set file = zip(""test1.txt"")
    Call file.extractFile(""zip2"", False, True)
    Set file = zip(""test2.txt"")
    Call file.extractFile(""zip2"", False, True)
End Function"
samples_platform_src_curdir.txt,"%REM
	Copyright 2023 HCL America, Inc.
	Licensed under the Apache License, Version 2.0 (the ""License"");
	you may not use this file except in compliance with the License.
	You may obtain a copy of the License at

	http://www.apache.org/licenses/LICENSE-2.0

	Unless required by applicable law or agreed to in writing,
	software distributed under the License is distributed on an ""AS IS"" BASIS,
	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	See the License for the specific language governing permissions and limitations under the License
%END REM

Option Declare
Option Public

Use ""../libs/dir""

Sub Initialize()
    Print CurDir
    Print getCurrentWorkingDirectory()
End Sub"
samples_platform_test_dirtests.txt,"%REM
	Copyright 2023 HCL America, Inc.
	Licensed under the Apache License, Version 2.0 (the ""License"");
	you may not use this file except in compliance with the License.
	You may obtain a copy of the License at

	http://www.apache.org/licenses/LICENSE-2.0

	Unless required by applicable law or agreed to in writing,
	software distributed under the License is distributed on an ""AS IS"" BASIS,
	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	See the License for the specific language governing permissions and limitations under the License
%END REM

Option Declare
Option Public

Use ""../libs/dir""
Use ""../libs/VoltScriptTesting""

Sub Initialize

    Dim OSUtils as New OSUtils
    Dim testRunner as New TestRunner(""Test directories and files"")
    Dim testSuite as New TestSuite(""Test directories and files"")
    Call testRunner.addTestSuite(testSuite)

    Call testSuite.describe(""Prove curDir is current working directory"").assertEqualsString(CurDir, getCurrentWorkingDirectory(), True)

    Call testSuite.describe(""Check tempDir exists"").assertTrue(checkIsDir(OSUtils.tempDir))
    Call testSuite.describe(""Check tempDir/foo does not exist"").assertFalse(checkIsDir(OSUtils.tempDir & ""/foo""))

    Dim expected as String
    Dim actual as String
    expected = OSUtils.tempDir & ""/foo/bar""
    actual = buildFooBarPath()
    Call testSuite.describe(""Check PathUtils builds as expected"").assertEqualsString(expected, actual, True)
    Call testSuite.describe(""Check directory with missing parent does not exist"").assertFalse(checkIsDir(actual))

    Call testSuite.describe(""Check non-existent file in tempDir"").assertFalse(checkIsFile(OSUtils.tempDir & ""/temp.txt""))
    expected = OSUtils.tempDir & ""/foo/test.txt""
    actual = buildFooTestFilePath()
    Call testSuite.describe(""Check PathUtils file builds as expected"").assertEqualsString(expected, actual, True)
    Call testSuite.describe(""Check directory with missing parent does not exist"").assertFalse(checkIsFile(actual))

    Call testSuite.describe(""Check creating directories"").assertTrue(makeDirectories(OSUtils.tempDir & ""/foo/bar""))
    Call testSuite.describe(""Check creating existing directories"").assertTrue(makeDirectories(OSUtils.tempDir & ""/foo/bar""))
    Call testSuite.describe(""Check deleting directory containing directories works"").assertTrue(removeDirectories(OSUtils.tempDir & ""/foo""))

    Call testSuite.describe(""Check files is array"").assertTrue(IsArray(getFiles(OSUtils.tempDir)))
End Sub"
samples_platform_test_streamtests.txt,"%REM
	Copyright 2023 HCL America, Inc.
	Licensed under the Apache License, Version 2.0 (the ""License"");
	you may not use this file except in compliance with the License.
	You may obtain a copy of the License at

	http://www.apache.org/licenses/LICENSE-2.0

	Unless required by applicable law or agreed to in writing,
	software distributed under the License is distributed on an ""AS IS"" BASIS,
	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	See the License for the specific language governing permissions and limitations under the License
%END REM

Option Declare
Option Public

Use ""../libs/stream_zip.vss""
Use ""../libs/VoltScriptTesting""
UseVSE ""*OSUtilsVSE""

Sub Initialize

    Dim testRunner as New TestRunner(""Test reading and writing files"")
    Dim testSuite as New TestSuite(""Test writing file"")
    Call testRunner.addTestSuite(testSuite)

    Dim OSUtils as New OSUtils()
    Dim stream as New Stream()
    Dim dirPath as String
    Dim filePath as String
    Dim actual as String
    Dim expected as String
    dirPath = CurDir & ""/streamtemp""
    Call OSUtils.makeDirectories(dirPath)
    filePath = dirPath & ""/testFile.txt""

    Call testSuite.describe(""Test creating file"").assertTrue(createOpenFile(stream, filePath))
    Call writeToFile(stream, ""Hello World"")
    Call stream.close

    expected = ""Hello World"" & Chr(10) & Chr(10)
    Call createOpenFile(stream, filePath)
    actual = readFromFile(stream)
    Call testSuite.describe(""Test reading file line by line"").assertEqualsString(expected, actual, True)
    Call stream.close

    Call createOpenFile(stream, filePath)
    actual = readWholeFile(stream)
    Call testSuite.describe(""Test reading file complete"").assertEqualsString(expected, actual, True)
    Call stream.close

    If testSuite.ranSuccessfully() Then
        Kill filePath
        Call OSUtils.removeDir(dirPath, true)
    End If

End Sub"
samples_platform_test_unittests.txt,"%REM
	Copyright 2023 HCL America, Inc.
	Licensed under the Apache License, Version 2.0 (the ""License"");
	you may not use this file except in compliance with the License.
	You may obtain a copy of the License at

	http://www.apache.org/licenses/LICENSE-2.0

	Unless required by applicable law or agreed to in writing,
	software distributed under the License is distributed on an ""AS IS"" BASIS,
	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	See the License for the specific language governing permissions and limitations under the License
%END REM

Option Declare
Option Public

Use ""../libs/envVars""
Use ""../libs/VoltScriptTesting""

Sub Initialize

    Dim OSUtils as New OSUtils
    Dim tradDir as String
    Dim osDir as String
    Dim osProp as String
    Dim testRunner as New TestRunner(""Test OS"")
    Dim testSuite as New TestSuite(""Environment Variables"")
    Call testRunner.addTestSuite(testSuite)

    tradDir = getHomeDirTraditional()
    osDir = getHomeDirOSEnvironment()
    osProp = getHomeDirOSProperty()

    Call testSuite.describe(""Check home dir using GetThreadInfo and OSUtils.Platform match"")._
        assertEqualsString(tradDir, osDir, False)
    Call testSuite.describe(""Check home dir using GetThreadInfo and OSUtils.HomeDir match"")._
        assertEqualsString(tradDir, osProp, false)
    Call testSuite.describe(""Check temp directory not blank"").assertNotEqualString("""", getTempDir)
    Call setEnvironmentVariable()
    Call testSuite.describe(""Check environment variable set"").assertEqualsString(""Hello World"", Environ$(""VOLTSCRIPT_HELLO""), False)

End Sub"
samples_platform_test_ziptests.txt,"%REM
	Copyright 2023 HCL America, Inc.
	Licensed under the Apache License, Version 2.0 (the ""License"");
	you may not use this file except in compliance with the License.
	You may obtain a copy of the License at

	http://www.apache.org/licenses/LICENSE-2.0

	Unless required by applicable law or agreed to in writing,
	software distributed under the License is distributed on an ""AS IS"" BASIS,
	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	See the License for the specific language governing permissions and limitations under the License
%END REM

Option Declare
Option Public

Use ""../libs/VoltScriptTesting""
Use ""../libs/stream_zip""
UseVSE ""*OSUtilsVSE""

Sub Initialize

    Dim OSUtils as New OSUtils()
    Dim stream as New Stream()
    Dim dirPath as String
    Dim mainDirPath as String
    Dim testRunner as New TestRunner(""Test ZIP"")
    Dim testSuite as New TestSuite(""Test zip files"")
    Call testRunner.addTestSuite(testSuite)

    mainDirPath = CurDir
    dirPath = CurDir & ""/zipTemp""
    Call OSUtils.makeDirectories(dirPath)
    Call createOpenFile(stream, dirPath & ""/test1.txt"")
    Call writeToFile(stream, ""Hello world"")
    Call stream.close
    Call createOpenFile(stream, dirPath & ""/test2.txt"")
    Call writeToFile(stream, ""Hello world"")
    Call stream.close

    Dim za as ZipArchive

    Set za = createZipAdd(dirPath)
    Call testSuite.describe(""Test zip1 created successfully"").assertTrue(Not za is Nothing)
    Call testSuite.describe(""Test zip1 contains two files"").assertEqualsLong(2, za.entryCount)
    Call za.closeArchive()

    Set za = createZipSpec(dirPath)
    Call testSuite.describe(""Test zip2 created successfully"").assertTrue(Not za is Nothing)
    Call testSuite.describe(""Test zip2 contains two files"").assertEqualsLong(2, za.entryCount)
    Call za.closeArchive()

    Set za = createZipArray(dirPath)
    Call testSuite.describe(""Test zip3 created successfully"").assertTrue(Not za is Nothing)
    Call testSuite.describe(""Test zip3 contains two files"").assertEqualsLong(2, za.entryCount)
    Call za.closeArchive()

    Call OSUtils.makeDirectories(dirPath & ""/zip1"")
    Call extractZip(dirPath)
    Call testSuite.describe(""Test zip1 directory created"").assertTrue(OSUtils.isDirectory(dirPath &""/zip1""))
    Call testSuite.describe(""Test test1.txt extracted"").assertTrue(OSUtils.isFile(dirPath &""/zip1/test1.txt""))
    Call testSuite.describe(""Test test2.txt extracted"").assertTrue(OSUtils.isFile(dirPath &""/zip1/test2.txt""))

    Call OSUtils.makeDirectories(dirPath & ""/zip2"")
    Call extractZipEachFile(dirPath)
    Call testSuite.describe(""Test zip1 directory created"").assertTrue(OSUtils.isDirectory(dirPath &""/zip2""))
    Call testSuite.describe(""Test test1.txt extracted"").assertTrue(OSUtils.isFile(dirPath &""/zip2/test1.txt""))
    Call testSuite.describe(""Test test2.txt extracted"").assertTrue(OSUtils.isFile(dirPath &""/zip2/test2.txt""))
    ChDir mainDirPath
End Sub"
samples_webvse_libs_functions.txt,"%REM
	Copyright 2023 HCL America, Inc.
	Licensed under the Apache License, Version 2.0 (the ""License"");
	you may not use this file except in compliance with the License.
	You may obtain a copy of the License at

	http://www.apache.org/licenses/LICENSE-2.0

	Unless required by applicable law or agreed to in writing,
	software distributed under the License is distributed on an ""AS IS"" BASIS,
	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	See the License for the specific language governing permissions and limitations under the License
%END REM

Option Declare
Option Public

UseVSE ""*WebVSE""
UseVSE ""*JsonVSE""

Private server as WebServer
Private dominoServer as WebServer

%REM
    Create or retrievve the private server as a WebServer object for httpstat.us
%END REM
Function getWebServer() as WebServer
    If (server is Nothing) Then
        Set server = new WebServer()
        server.protocol = ""HTTPS""
        server.HostUrl = ""httpstat.us""
    End If
    Return server
End Function

%REM
    Makes a GET request for a text return value
    DO NOT USE IN UNIT TESTS - UNIT TESTS SHOULD NOT REQUIRE EXTERNAL SERVICES
%END REM
Function makeBasicRequest() as WebResponse
    Dim request as WebRequest

    Set request = getWebServer().createRequest()
    request.target = ""200""
    request.timeoutSeconds = 5
    Return request.send()
End Function


%REM
    Makes a POST request, sending JSON with custom header, returning JSON
    DO NOT USE IN UNIT TESTS - UNIT TESTS SHOULD NOT REQUIRE EXTERNAL SERVICES
%END REM
Function makeJsonRequest() as WebResponse
    Dim request as WebRequest

    Set request = getWebServer().createRequest()
    request.Verb = ""PUT""
    request.ContentType = ""application/json""
    request.AcceptHeader = ""application/json""
    Call request.addHeader(""X-HttpStatus-Response-Foo"", ""Bar"")
    request.target = 418
    request.timeoutSeconds = 5
    request.RequestBody = |{""hello"":""world""}|
    Return request.send()
End Function

%REM
    Makes a GET request using a URL Builder
    DO NOT USE IN UNIT TESTS - UNIT TESTS SHOULD NOT REQUIRE EXTERNAL SERVICES
%END REM
Function makeRequestFromUrlBuilder(server as WebServer) as WebResponse
    Dim request as WebRequest
    Dim builder as New UrlBuilder()

    builder.isHttps = True
    builder.targetHost = ""httpstat.us""
    builder.targetPath = ""200""
    Call builder.addUrlParameter(""sleep"", ""1000"")
    Set request = server.createRequestWithUrl(builder.toString(False))
    request.timeoutSeconds = 5
    Return request.send()
End Function

%REM
    Validates a response code from basic request
    DO NOT USE IN UNIT TESTS - UNIT TESTS SHOULD NOT REQUIRE EXTERNAL SERVICES
%END REM
Function validateResponseCode(responseCode as Integer) as Boolean
    Dim request as WebRequest
    Dim response as WebResponse

    Set request = getWebServer().createRequest()
    request.target = ""418""
    Set response = request.send()
    Return response.responseCode = 200
End Function

%REM
    Parses a JSON response, assumed to be ContentBody from a WebResponse
%END REM
Function parseResponse(json as String) as JsonObject
    Dim parser as New JsonParser()
    Dim obj as JsonObject

    Call parser.loadFromJSON(json)
    Return parser.getRootObject
End Function

%REM
    Creates a WebServer object pointing to a Domino Server
    NOTE: MUST BE UPDATED TO WORK
%END REM
Function getDominoWebServer() as WebServer
    If (dominoServer is Nothing) Then
        Set dominoServer = new WebServer()
        dominoServer.protocol = ""HTTPS"" ' or omit if HTTP
        dominoServer.HostUrl = """"   ' Put Domino server here, without protocol
    End If
    Return dominoServer
End Function

%REM
    Downloads a file that is a view icon on a Domino server
%END REM
Sub downloadViewIcon()

    Dim request as WebRequest
    Dim response as WebResponse
    Dim path as String

    Try
        ' Update Domino server details in `getDominoWebServer()`
        Set request = getDominoWebServer().createRequest()
        request.target = ""icons/vwicn001.gif""
        request.timeoutSeconds = 10
        path = CurDir & ""/unit-test-reports/vwicon1.gif""
        Set response = request.fileDownload(path)
        If response.responseCode = 200 Then
            Print ""Successful download, check "" & path
        Else
            Print ""Download failed, "" & response.responseCode
        End If
    Catch
        Print ""Error "" & Error() & "" on line "" & Erl()
    End Try

End Sub

%REM
    Downloads simultaneously three files that are view icons on a Domino server
%END REM
Sub downloadViewIconsAsync()

    Dim request as WebRequest
    Dim arr(2) as Completion
    Dim response as WebResponse
    Dim path as String

    Try
        ' Update Domino server details in `getDominoWebServer()`
        Set request = getDominoWebServer().createRequest()
        request.timeoutSeconds = 10
        request.target = ""icons/vwicn001.gif""
        path = CurDir & ""/unit-test-reports/vwicon-async1.gif""
        Set arr(0) = request.fileDownloadNoWait(path)

        Set request = getDominoWebServer().createRequest()
        request.timeoutSeconds = 10
        request.target = ""icons/vwicn002.gif""
        path = CurDir & ""/unit-test-reports/vwiconasync2.gif""
        Set arr(1) = request.fileDownloadNoWait(path)

        Set request = getDominoWebServer().createRequest()
        request.timeoutSeconds = 10
        request.target = ""icons/vwicn003.gif""
        path = CurDir & ""/unit-test-reports/vwiconasync3.gif""
        Set arr(2) = request.fileDownloadNoWait(path)

        Call arr(0).wait()
        Call arr(1).wait()
        Call arr(2).wait()

        Dim i as Integer
        For i = 0 To UBound(arr)
            Print ""Completion code is "" & arr(i).CompletionCode
            Set response = arr(i).response
            Print ""Response code is "" & response.responseCode
        Next

        If response.responseCode = 200 Then
            Print ""Successful download, check "" & path
        End If
    Catch
        Print ""Error "" & Error() & "" on line "" & Erl()
    End Try

End Sub"
samples_webvse_src_dominoDownload.txt,"%REM
	Copyright 2023 HCL America, Inc.
	Licensed under the Apache License, Version 2.0 (the ""License"");
	you may not use this file except in compliance with the License.
	You may obtain a copy of the License at

	http://www.apache.org/licenses/LICENSE-2.0

	Unless required by applicable law or agreed to in writing,
	software distributed under the License is distributed on an ""AS IS"" BASIS,
	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	See the License for the specific language governing permissions and limitations under the License
%END REM

Option Declare
Option Public
Use ""../libs/functions""

Sub Initialize

    Call downloadViewIcon()

End Sub"
samples_webvse_src_main.txt,"%REM
	Copyright 2023 HCL America, Inc.
	Licensed under the Apache License, Version 2.0 (the ""License"");
	you may not use this file except in compliance with the License.
	You may obtain a copy of the License at

	http://www.apache.org/licenses/LICENSE-2.0

	Unless required by applicable law or agreed to in writing,
	software distributed under the License is distributed on an ""AS IS"" BASIS,
	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	See the License for the specific language governing permissions and limitations under the License
%END REM

Use ""../libs/functions""

Sub Initialize
    Dim response as WebResponse
    Dim server as New WebServer()
    Dim request as WebRequest
    Dim builder as New UrlBuilder()

    builder.isHttps = True
    builder.targetHost = ""httpstat.us""
    builder.targetPath = ""200""
    Call builder.addUrlParameter(""sleep"", ""1000"")
    Set request = server.createRequestWithUrl(builder.toString(False))
    request.timeoutSeconds = 5

    Set response = request.send()
    Print response.ContentBody

    ForAll cookie in response.AllCookies
        Print ""Cookie is "" & cookie
    End ForAll

    ForAll header in response.AllHeaders
        Print ""Header is "" & header
    End ForAll

End Sub"
samples_webvse_test_integrationtests.txt,"%REM
	Copyright 2023 HCL America, Inc.
	Licensed under the Apache License, Version 2.0 (the ""License"");
	you may not use this file except in compliance with the License.
	You may obtain a copy of the License at

	http://www.apache.org/licenses/LICENSE-2.0

	Unless required by applicable law or agreed to in writing,
	software distributed under the License is distributed on an ""AS IS"" BASIS,
	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	See the License for the specific language governing permissions and limitations under the License
%END REM

Option Declare
Option Public

Use ""../libs/functions""
Use ""../libs/VoltScriptTesting""

Sub Initialize

    Dim testRunner as New TestRunner(""Web Integration Tests"")
    Dim testSuite as New TestSuite(""WebResponse Tests"")
    Call testRunner.addTestSuite(testSuite)
    Dim resp as WebResponse
    Dim parser as new JsonParser
    Dim jsonObj as JsonObject

    Set resp = makeBasicRequest()
    Call testSuite.describe(""Check request successful"").assertEqualsInteger(200, resp.responseCode)
    Call testSuite.describe(""Check response content type is text"").assertEqualsString(""text/plain"", resp.ContentType, True)
    Call testSuite.describe(""Check content body"").assertEqualsString(""200 OK"", resp.ContentBody, True)

    Set resp = makeJsonRequest()
    Call testSuite.describe(""Check JSON return code"").assertEqualsInteger(418, resp.responseCode)
    Call testSuite.describe(""Check content type is JSON"").assertEqualsString(""application/json"", resp.ContentType, True)
    Try
        Call testSuite.describe(""Check parsing JSON"")
        Call parser.loadFromJson(resp.ContentBody)
        Call testSuite.addResult(true, """")
    Catch
        Call testSuite.addError(""Error "" & Error() & "" on line "" & Erl(), resp.ContentBody)
    End Try
    If (Not jsonObj is Nothing) Then
        Set jsonObj = parser.getRootObject
        Call testSuite.describe(""Check description is I'm a teapot"").assertEqualsString(""I'm a teapot"", CStr(jsonObj.getChild(""description"").scalarValue), true)
    End If

    Dim newServer as New WebServer
    Set resp = makeRequestFromUrlBuilder(newServer)
    Call testSuite.describe(""Check response is not nothing"").assertTrue(Not resp is Nothing)
    Call testSuite.describe(""Check URLBuilder return code"").assertEqualsInteger(200, resp.responseCode)

End Sub"
samples_webvse_test_unittests.txt,"%REM
	Copyright 2023 HCL America, Inc.
	Licensed under the Apache License, Version 2.0 (the ""License"");
	you may not use this file except in compliance with the License.
	You may obtain a copy of the License at

	http://www.apache.org/licenses/LICENSE-2.0

	Unless required by applicable law or agreed to in writing,
	software distributed under the License is distributed on an ""AS IS"" BASIS,
	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	See the License for the specific language governing permissions and limitations under the License
%END REM

Use ""../libs/functions""
Use ""../libs/VoltScriptTesting""

Sub Initialize

    Dim testRunner as New TestRunner(""Test REST services"")
    Dim testSuite as New TestSuite(""WebServer Unit Tests"")
    Dim server as WebServer
    Call testRunner.addTestSuite(testSuite)

    Set server = getWebServer()
    Call testSuite.describe(""Test web server is not nothing"").assertTrue(Not server Is Nothing)
    Call testSuite.describe(""Check server protocol is HTTPS"").assertEqualsString(""HTTPS"", server.protocol, True)
    Call testSuite.describe(""Check HostUrl"").assertEqualsString(""httpstat.us"", server.HostUrl, True)

    Dim testString as String
    Dim resultString as String
    testString = ""target=https://httpstat.us""
    resultString = ""target=https://httpstat.us""
    Call testSuite.describe(""Test URL encoding matches"").assertEqualsString(resultString, server.URLencode(testString), True)
    Call testSuite.describe(""Test URL decoding matches"").assertEqualsString(testString, server.URLdecode(resultString), True)

    Dim testSuite2 as New TestSuite(""Parsing Unit Tests"")
    Dim json as String
    Dim jsonObj as JsonObject
    Call testRunner.addTestSuite(testSuite2)

    json = |{""code"":418,""description"":""I'm a teapot""}|
    Set jsonObj = parseResponse(json)
    Call testSuite2.describe(""Test code is 418"").assertEqualsInteger(418, CInt(jsonObj.getChild(""code"").scalarValue))
    Call testSuite2.describe(""Test description is I'm a teapot"").assertEqualsString(""I'm a teapot"", CStr(jsonObj.getChild(""description"").scalarValue), True)
End Sub"
samples_zulu_libs_functions.txt,"%REM
	Copyright 2023 HCL America, Inc.
	Licensed under the Apache License, Version 2.0 (the ""License"");
	you may not use this file except in compliance with the License.
	You may obtain a copy of the License at

	http://www.apache.org/licenses/LICENSE-2.0

	Unless required by applicable law or agreed to in writing,
	software distributed under the License is distributed on an ""AS IS"" BASIS,
	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	See the License for the specific language governing permissions and limitations under the License
%END REM

Option Declare
Option Public

UseVSE ""*ZuluVSE""

%REM
    Parses an ISO string ending ""Z""
%END REM
Function parseISOZuluDateString() as DateTimeObject
    Dim dateStr as String
    Dim parser as new DateTimeParser()
    Dim dateObj as DateTimeObject

    dateStr = ""2023-08-15T09:50:20Z""
    Set dateObj = parser.parseISOString(dateStr)
    Return dateObj
End Function

%REM
    Parses an ISO string with offset
%END REM
Function parseISOOffsetDateString() as DateTimeObject
    Dim dateStr as String
    Dim parser as new DateTimeParser()
    Dim dateObj as DateTimeObject

    dateStr = ""2023-08-15T02:50:20-07:00""
    Set dateObj = parser.parseISOString(dateStr)
    Print dateObj.defaultFormat
    Return dateObj
End Function

%REM
    Parses a date in epoch seconds from Jan 1 1970
%END REM
Function parseDateEpoch()
    Dim parser as new DateTimeParser()
    Dim dateObj as DateTimeObject

    Set dateObj = parser.BuildDateTimeFromEpoch(1692101300)
    Print dateObj.defaultFormat
    Return dateObj
End Function

%REM
    Parses a date from constituent parts
%END REM
Function parseDateParts()
    Dim parser as new DateTimeParser()
    Dim dateObj as DateTimeObject

    Set dateObj = parser.BuildDateTimeObject(2023,8,4,11,20,25,-60)
    Print dateObj.defaultFormat
    Return dateObj
End Function

%REM
    Parses a date from constituent parts
%END REM
Function parseDateFormat(simple as Boolean)
    Dim dateStr as String
    Dim dateFmt as String
    Dim parser as new DateTimeParser()
    Dim dateObj as DateTimeObject

    dateStr = ""2023-08-15 02:50:20""
    If (simple) Then
        dateFmt = ""%F %T""
    Else
        dateFmt = ""%Y-%m-%d %H:%M:%S""
    End If
    Set dateObj = parser.parseDateString(dateStr, dateFmt)
    Return dateObj
End Function

%REM
    Parses a date using various formats
%END REM
Sub toStringFormatExample()
    Dim dtObj as DateTimeObject, dtParser as New DateTimeParser
    Dim testISOStr as String, testFmtPattern1 as String, testFmtPattern2 as string, testFmtPattern3 as String
    testISOStr = ""2023-02-20T20:49:13Z""
    testFmtPattern1 = ""%Y-%m-%d %H:%M:%S %Z""
    testFmtPattern2 = ""%F %T %Z""
    testFmtPattern3 = ""%A, %B %d %Y %T %Z""

    Set dtObj = dtParser.ParseISOString(testISOStr)

    Print |Using test ISO String ""| & testISOStr & |"" with no locale code; |
    Print |Format pattern ""| & testFmtPattern1 & |"" returns ""| & dtObj.toString(testFmtPattern1, """") & |"",|
    Print |Format pattern ""| & testFmtPattern2 & |"" returns ""| & dtObj.toString(testFmtPattern2, """") & |"",|
    Print |Format pattern ""| & testFmtPattern3 & |"" returns ""| & dtObj.toString(testFmtPattern3, """") & |""|
End Sub


%REM
    Parses a date using various formats and a locale
%END REM
Function toStringFormatTypeLocale(formatType as Integer, locale as String) as String
    Dim dtObj as DateTimeObject, dtParser as New DateTimeParser
    Dim testISOStr as String, testFmtPattern1 as String, testFmtPattern2 as string, testFmtPattern3 as String
    %REM
        %B == full month name
        %b == abbreviated month name

        %A == full day name
        %a == abbreviated day name

        %m == month

        %d == day of month
        %0d == day of month (2 digit)

        %Y == year as four digits

        %F == equivalent of %Y-%m-%d

        %H == hour
        %M == minute
        %S == second
        %T == equivalent of %H:%M:%S

        %Z == locale-dependent time zone name or abbrev
    %END REM
    testISOStr = ""2023-02-20T20:49:13Z""
    testFmtPattern1 = ""%Y-%m-%d %H:%M:%S %Z""
    testFmtPattern2 = ""%F %T %Z""
    testFmtPattern3 = ""%A, %B %d %Y %T %Z""

    Set dtObj = dtParser.ParseISOString(testISOStr)

    Select Case formatType
        Case 1:
            Return dtObj.toString(testFmtPattern1, locale)
        Case 2:
            Return dtObj.toString(testFmtPattern2, locale)
        Case 3:
            Return dtObj.toString(testFmtPattern3, locale)
        Case Else
            Error 1001, ""Unexpected formatType request, pass 1, 2, or 3""
    End Select
End Function"
samples_zulu_src_main.txt,"%REM
	Copyright 2023 HCL America, Inc.
	Licensed under the Apache License, Version 2.0 (the ""License"");
	you may not use this file except in compliance with the License.
	You may obtain a copy of the License at

	http://www.apache.org/licenses/LICENSE-2.0

	Unless required by applicable law or agreed to in writing,
	software distributed under the License is distributed on an ""AS IS"" BASIS,
	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	See the License for the specific language governing permissions and limitations under the License
%END REM

Option Declare
Option Public
Use ""../libs/functions""

Sub printStringFormatExamples()

    Dim locale as String
    Dim formatType as Integer

    %REM
        Before using Locales, you must ensure that the appropriate locale has been installed.

        Locale codes consist of appropriate ISO 639 Language and ISO 3166 Country codes concatenated with an underscore,
        followed by a period and the encoding format.

        ISO 639 Language Codes    https://www.iso.org/iso-639-language-codes.html
        ISO 3166 Country Codes    https://www.iso.org/iso-3166-country-codes.html

        Example:
            locale = ""en_US.utf8"" ' English (United States)
            locale = ""es_MX.utf8"" ' Spanish (Mexico)
            locale = ""fr_BE.utf8"" ' French  (Belgium)
    %END REM

    ' locale = YOUR APPROPRIATE LOCALE CODE
    Do
        Print toStringFormatTypeLocale(++formatType, locale)
    Loop Until (formatType > 2)
End Sub

Sub Initialize

    Try
        Call toStringFormatExample()
        Call printStringFormatExamples()
    Catch
        Print ""Error "" & Error() & "" on line "" & Erl()
    End Try

End Sub"
samples_zulu_test_unitTests.txt,"%REM
	Copyright 2023 HCL America, Inc.
	Licensed under the Apache License, Version 2.0 (the ""License"");
	you may not use this file except in compliance with the License.
	You may obtain a copy of the License at

	http://www.apache.org/licenses/LICENSE-2.0

	Unless required by applicable law or agreed to in writing,
	software distributed under the License is distributed on an ""AS IS"" BASIS,
	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	See the License for the specific language governing permissions and limitations under the License
%END REM

Option Declare
Option Public
Use ""../libs/VoltScriptTesting""
Use ""../libs/functions""

Sub Initialize

    Dim testRunner as New TestRunner(""Date tests"")
    Dim testSuite as New TestSuite(""Date parsing tests"")
    Call testRunner.addTestSuite(testSuite)

    Try
        Dim dateObj as DateTimeObject
        Call testSuite.describe(""Parsing date parts"")
        Set dateObj = parseDateParts()
        Call testSuite.addResult(True, """")
        Call testSuite.describe(""Check Parts Year"").assertEqualsInteger(2023, dateObj.Year)
        Call testSuite.describe(""Check Parts Month"").assertEqualsInteger(8, dateObj.Month)
        Call testSuite.describe(""Check Parts Day"").assertEqualsInteger(4, dateObj.Day)
        Call testSuite.describe(""Check Parts Hour"").assertEqualsInteger(12, dateObj.Hours)
        Call testSuite.describe(""Check Parts Minutes"").assertEqualsInteger(20, dateObj.Minutes)
        Call testSuite.describe(""Check Parts Seconds"").assertEqualsInteger(25, dateObj.Seconds)
    Catch
        Call testSuite.addError(""Error "" & Error() & "" on line "" & Erl(), GetThreadInfo(12))
        Print GetThreadInfo(12)
        Print ""Error "" & Error() & "" on line "" & Erl()
    End Try

    Try
        Set dateObj = parseDateEpoch()
        Call testSuite.describe(""Check Epoch Year"").assertEqualsInteger(2023, dateObj.Year)
        Call testSuite.describe(""Check Epoch Month"").assertEqualsInteger(8, dateObj.Month)
        Call testSuite.describe(""Check Epoch Day"").assertEqualsInteger(15, dateObj.Day)
        Call testSuite.describe(""Check Epoch Hour"").assertEqualsInteger(12, dateObj.Hours)
        Call testSuite.describe(""Check Epoch Minutes"").assertEqualsInteger(8, dateObj.Minutes)
        Call testSuite.describe(""Check Epoch Seconds"").assertEqualsInteger(20, dateObj.Seconds)
        Call testSuite.describe(""Check Epoch default date"").assertEqualsString(""Tue Aug 15 12:08:20 2023Z"", dateObj.defaultFormat, True)
    Catch
        Call testSuite.addError(""Error "" & Error() & "" on line "" & Erl(), GetThreadInfo(12))
        Print GetThreadInfo(12)
        Print ""Error "" & Error() & "" on line "" & Erl()
    End Try

    Try
        Set dateObj = parseISOZuluDateString()
        Call testSuite.describe(""Check Zulu Year"").assertEqualsInteger(2023, dateObj.Year)
        Call testSuite.describe(""Check Zulu Month"").assertEqualsInteger(8, dateObj.Month)
        Call testSuite.describe(""Check Zulu Day"").assertEqualsInteger(15, dateObj.Day)
        Call testSuite.describe(""Check Zulu Hour"").assertEqualsInteger(9, dateObj.Hours)
        Call testSuite.describe(""Check Zulu Minutes"").assertEqualsInteger(50, dateObj.Minutes)
        Call testSuite.describe(""Check Zulu Seconds"").assertEqualsInteger(20, dateObj.Seconds)
    Catch
        Call testSuite.addError(""Error "" & Error() & "" on line "" & Erl(), GetThreadInfo(12))
        Print GetThreadInfo(12)
        Print ""Error "" & Error() & "" on line "" & Erl()
    End Try

    Try
        Set dateObj = parseISOOffsetDateString()
        Call testSuite.describe(""Check Offset Year"").assertEqualsInteger(2023, dateObj.Year)
        Call testSuite.describe(""Check Offset Month"").assertEqualsInteger(8, dateObj.Month)
        Call testSuite.describe(""Check Offset Day"").assertEqualsInteger(15, dateObj.Day)
        Call testSuite.describe(""Check Offset Hour"").assertEqualsInteger(9, dateObj.Hours)
        Call testSuite.describe(""Check Offset Minutes"").assertEqualsInteger(50, dateObj.Minutes)
        Call testSuite.describe(""Check Offset Seconds"").assertEqualsInteger(20, dateObj.Seconds)
    Catch
        Call testSuite.addError(""Error "" & Error() & "" on line "" & Erl(), GetThreadInfo(12))
        Print GetThreadInfo(12)
        Print ""Error "" & Error() & "" on line "" & Erl()
    End Try

    Try
        Set dateObj = parseDateFormat(False)
        Call testSuite.describe(""Check Simple Format Year"").assertEqualsInteger(2023, dateObj.Year)
        Call testSuite.describe(""Check Simple Format Month"").assertEqualsInteger(8, dateObj.Month)
        Call testSuite.describe(""Check Simple Format Day"").assertEqualsInteger(15, dateObj.Day)
        Call testSuite.describe(""Check Simple Format Hour"").assertEqualsInteger(2, dateObj.Hours)
        Call testSuite.describe(""Check Simple Format Minutes"").assertEqualsInteger(50, dateObj.Minutes)
        Call testSuite.describe(""Check Simple Format Seconds"").assertEqualsInteger(20, dateObj.Seconds)
    Catch
        Call testSuite.addError(""Error "" & Error() & "" on line "" & Erl(), GetThreadInfo(12))
        Print GetThreadInfo(12)
        Print ""Error "" & Error() & "" on line "" & Erl()
    End Try

    Try
        Set dateObj = parseDateFormat(True)
        Call testSuite.describe(""Check Simple Format Year"").assertEqualsInteger(2023, dateObj.Year)
        Call testSuite.describe(""Check Simple Format Month"").assertEqualsInteger(8, dateObj.Month)
        Call testSuite.describe(""Check Simple Format Day"").assertEqualsInteger(15, dateObj.Day)
        Call testSuite.describe(""Check Simple Format Hour"").assertEqualsInteger(2, dateObj.Hours)
        Call testSuite.describe(""Check Simple Format Minutes"").assertEqualsInteger(50, dateObj.Minutes)
        Call testSuite.describe(""Check Simple Format Seconds"").assertEqualsInteger(20, dateObj.Seconds)
    Catch
        Call testSuite.addError(""Error "" & Error() & "" on line "" & Erl(), GetThreadInfo(12))
        Print GetThreadInfo(12)
        Print ""Error "" & Error() & "" on line "" & Erl()
    End Try

    Try
        Call testSuite.describe(""Check convert date to string format 1"").assertEqualsString(""2023-02-20 20:49:13 UTC"", toStringFormatTypeLocale(1, """"), False)
        Call testSuite.describe(""Check convert date to string format 2"").assertEqualsString(""2023-02-20 20:49:13 UTC"", toStringFormatTypeLocale(2, """"), False)
    Catch
        Call testSuite.addError(""Error "" & Error() & "" on line "" & Erl(), GetThreadInfo(12))
        Print ""Error "" & Error() & "" on line "" & Erl()
    End Try

End Sub"
docs/example_code/basic-coll.txt,"%REM
    Copyright 2022-23 HCL America, Inc.

    Licensed under the Apache License, Version 2.0 (the ""License"");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an ""AS IS"" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
%END REM
Option Declare
Use ""../../src/VoltScriptCollections""  ' change this to point to the location of your VoltScriptCollections.vss file

Class NumFilter as CollectionFilter

    Function filter(source as Variant) as Boolean
        Return IsNumeric(source)
    End Function

End Class

Class IndexTransformer as CollectionTransformer

    Public count as Integer     ' So it can be reset if the transformer is re-used

    Function transform(source as Variant) as Variant
        Return ""Element "" & count++ & "" is "" & source
    End Function

End Class

Sub Initialize

    Dim coll as New Collection(""SCALAR"", Nothing, False, False)
    Dim i as Long
    Dim dbls(3) as Double

    Call coll.add(""Hello"")
    Call coll.add(""World"")
    Call coll.add(1)
    Call coll.add(2)
    Call coll.add(3)
    Call coll.add(""Hello"")

    dbls(0) = 1.23
    dbls(1) = 21.648
    dbls(2) = 8472.6
    dbls(3) = 746.0
    Call coll.addAll(dbls)

    Do
        Print coll.getNthElementRaw(i)
    Loop While ++i < coll.ElementCount

    Print ""===Insertion===""
    Call coll.insertAt(""New"", 1)
    Print coll.join("","")

    Print ""===Coll2===""
    i = 0
    Dim coll2 as New Collection(""SCALAR"", Nothing, True, True)

    Call coll2.add(""Hello"")
    Call coll2.add(""World"")
    Call coll2.add(1)
    Call coll2.add(2)
    Call coll2.add(3)
    Call coll2.add(2.5)
    Call coll2.add(""Hello"")

    Do
        Print coll2.getNthElementRaw(i)
    Loop While ++i < coll2.ElementCount

    Print ""===Coll2 reversed===""
    i = 0
    Call coll2.reverse()
    Call coll2.add(1.5)

    Do
        Print coll2.getNthElementRaw(i)
    Loop While ++i < coll2.ElementCount

End Sub"
docs/example_code/basic-map.txt,"%REM
    Copyright 2022-23 HCL America, Inc.

    Licensed under the Apache License, Version 2.0 (the ""License"");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an ""AS IS"" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
%END REM
Option Declare
Option Public
Use ""../../src/VoltScriptCollections""  ' change this to point to the location of your VoltScriptCollections.vss file

Sub Initialize

    Dim map as New Map(""STRING"", Nothing, False)
    Dim i as Long

    Print ""===Unsorted Map===""
    Call map.put(""AZ"", ""Arizona"")
    Call map.put(""FL"", ""Florida"")
    Call map.put(""IO"", ""Iowa"")
    Call map.put(""NE"", ""Nebraska"")
    Call map.put(""PA"", ""Pennsylvania"")
    Call map.put(""AL"", ""Alabama"")

    Do
        Print map.getNthValueRaw(i)
    Loop While ++i < map.elementCount

    Print ""===Addition===""
    i = 0
    Call map.put(""CA"", ""California"")

    Do
        Print map.getNthValueRaw(i)
    Loop While ++i < map.elementCount
    
    Print ""===Sorted Map===""
    i = 0
    Dim map2 as new Map(""STRING"", Nothing, True)

    Call map2.putAll(map)

    Do
        Print map2.getNthValueRaw(i)
    Loop While ++i < map2.elementCount

    Print ""===Addition===""
    i = 0
    Call map2.put(""NY"", ""New York"")

    Do
        Print map2.getNthValueRaw(i)
    Loop While ++i < map2.elementCount

    Print ""===Reversing===""
    i = 0
    Call map2.reverse()
    Call map2.put(""WA"", ""Washington"")

    Do
        Print map2.getNthValueRaw(i)
    Loop While ++i < map2.elementCount

    Print ""===Checking for Elements===""
    If (IsEmpty(map2.getValueRawByKey(""CO""))) Then
        Print ""Could not find CO""
    Else
        Print ""Found CO""
    End If

    If (map2.containsKey(""NY"")) Then
        Print ""Found NY""
    Else
        Print ""Could not find NY""
    End If

    If (map2.contains(""Las Vegas"", Nothing)) Then
        Print ""Found Las Vegas""
    Else
        Print ""Could not find Las Vegas""
    End If


End Sub"
docs/example_code/people-coll.txt,"%REM
    Copyright 2022-23 HCL America, Inc.

    Licensed under the Apache License, Version 2.0 (the ""License"");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an ""AS IS"" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
%END REM
Option Declare
Use ""../../src/VoltScriptCollections""  ' change this to point to the location of your VoltScriptCollections.vss file

Class Person

    Public firstName as String
    Public lastName as String
    Public age as Integer

End Class

Class PersonAlt
    
    Public fullName as String
    Public ageRange as String

End Class

Class PersonComparator as Comparator

    Sub New(isDescending as Boolean)
        'Nothing needed here
    End Sub

    Function compare(source as Variant, target as Variant) as Integer
        Try
            Dim person1 as Person
            Dim person2 as Person
            Dim check as Integer

            Set person1 = source
            Set person2 = target
            If (person1.age < person2.age) Then ' (1)!
                Return -1
            ElseIf (person1.age > person2.age) Then
                Return 1
            Else
                check = StrCompare(Person1.firstName, person2.firstName, 0)
                If (check = 0) Then check = StrCompare(Person1.lastName, person2.lastName, 0)
                Return check
            End If
        Catch
            Print ""Error "" & Error() & "" on line "" & Erl()
            Print ""Stack trace: "" & GetThreadInfo(12)
        End Try
    End Function

    Function equals(source as Variant, target as Variant) as Boolean
        If compare(source, target) = 0 Then Return True
    End Function

End Class

Class PersonFilter as CollectionFilter

    Function filter(source as Variant) as Boolean
        Return CInt(source.age) < 80
    End Function

End Class

Class PersonTransformer as CollectionTransformer

    Function transform(source as Variant) as Variant
        Dim newPerson as new PersonAlt()
        Dim oldPerson as Person

        Set oldPerson = source
        newPerson.fullname = oldPerson.firstName & "" "" & oldPerson.lastName
        Select Case oldPerson.age
            Case Is < 18:
                newPerson.ageRange = ""Child""
            Case 16 To 30
                newPerson.ageRange = ""Young Person""
            Case Is > 60
                newPerson.ageRange = ""Pensioner""
            Case Else
                newPerson.ageRange = ""Adult""
        End Select
        Return newPerson
    End Function

End Class

Class PersonAltCollection as Collection

    Sub New(), Collection(""PERSONALT"", Nothing, False, False)
        ' Nothing to do
    End Sub

    Function getNthElement(index as Long) as PersonAlt
        Return getNthElementRaw(index)
    End Function

End Class

Sub Initialize

    Dim personColl as New Collection(""PERSON"", Nothing, False, False)
    Call personColl.add(createPerson(""Dennis"", ""Doe"", 84))
    Call personColl.add(createPerson(""Denise"", ""Doe"", 82))
    Call personColl.add(createPerson(""Andrew"", ""Doe"", 65))
    Call personColl.add(createPerson(""Fred"", ""Doe"", 65))
    Call personColl.add(createPerson(""Frances"", ""Doe"", 67))
    Call personColl.add(createPerson(""John"", ""Doe"", 42))
    Call personColl.add(createPerson(""Jane"", ""Doe"", 30))
    Call personColl.add(createPerson(""Johnathan"", ""Doe"", 12))
    Call personColl.add(createPerson(""Janet"", ""Doe"", 6))
    Call personColl.add(createPerson(""Ken"", ""Doe"", 41))
    Call personColl.add(createPerson(""Karen"", ""Doe"", 39))
    Call personColl.add(createPerson(""Bill"", ""Doe"", 19))
    Call personColl.add(createPerson(""Bob"", ""Doe"", 17))
    Call personColl.add(createPerson(""Ben"", ""Doe"", 10))

    Dim filter as New PersonFilter()
    Dim compar as New PersonComparator(false)
    Dim sortedPersonColl as New Collection(""PERSON"", compar, True, True)
    Dim personAltTransformer as New PersonTransformer()
    Dim personAltColl as New PersonAltCollection()

    ' Then convert
    Call sortedPersonColl.addAll(personColl.filter(filter)).transform(personAltTransformer, personAltColl)

    Dim i as Long
    Dim altPerson as PersonAlt
    Do
        Set altPerson = personAltColl.getNthElement(i)
        Print altPerson.fullName & "" - "" & altPerson.ageRange
    Loop While ++i < personAltColl.elementCount

End Sub

Function createPerson(firstName as String, lastName as String, age as Integer) as Person

    Set createPerson = new Person()
    createPerson.firstName = firstName
    createPerson.lastName = lastName
    createPerson.age = age

End Function"
docs/example_code/people-map.txt,"%REM
    Copyright 2022-23 HCL America, Inc.

    Licensed under the Apache License, Version 2.0 (the ""License"");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an ""AS IS"" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
%END REM
Option Declare
Use ""../../src/VoltScriptCollections""  ' change this to point to the location of your VoltScriptCollections.vss file

Class Person

    Public key as String
    Public firstName as String
    Public lastName as String
    Public age as Integer

End Class

Class AltPerson

    Public fullName as String
    Public ageRange as String

End Class

Class PersonFilter as MapFilter

    Function filter(kvPair as Pair) as Boolean
        Return CInt(kvPair.value.age) < 80
    End Function

End Class

Class PersonTransformer as MapTransformer

    Function transform(kvPair as Pair) as Pair
        Dim tempPerson as Person
        Dim newPerson as New AltPerson
        Dim newKey as String

        Set tempPerson = kvPair.value
        If (tempPerson.age < 80) Then
            newKey = Format(tempPerson.age, ""00"") & "","" & tempPerson.firstName & "" "" & tempPerson.lastName & "","" & tempPerson.key
            newPerson.fullName = tempPerson.firstName & "" "" & tempPerson.lastName
            newPerson.ageRange = getAgeRange(tempPerson.age)
            Return new Pair(newKey, newPerson)
        End If
    End Function

    Function getAgeRange(age as Integer) as String
        Select Case age
            Case Is < 18:
                Return ""Child""
            Case 16 To 30
                Return ""Young Person""
            Case Is > 60
                Return ""Pensioner""
            Case Else
                Return ""Adult""
        End Select
    End Function

End Class

Sub Initialize

    Dim personMap as New Map(""PERSON"", Nothing, False)
    Call personMap.putPair(createPair(""1"", ""Dennis"", ""Doe"", 84))
    Call personMap.putPair(createPair(""2"", ""Denise"", ""Doe"", 82))
    Call personMap.putPair(createPair(""3"", ""Andrew"", ""Doe"", 65))
    Call personMap.putPair(createPair(""4"", ""Fred"", ""Doe"", 65))
    Call personMap.putPair(createPair(""5"", ""Frances"", ""Doe"", 67))
    Call personMap.putPair(createPair(""6"", ""John"", ""Doe"", 42))
    Call personMap.putPair(createPair(""7"", ""Jane"", ""Doe"", 30))
    Call personMap.putPair(createPair(""8"", ""Johnathan"", ""Doe"", 12))
    Call personMap.putPair(createPair(""9"", ""Janet"", ""Doe"", 6))
    Call personMap.putPair(createPair(""10"", ""Ken"", ""Doe"", 41))
    Call personMap.putPair(createPair(""11"", ""Karen"", ""Doe"", 39))
    Call personMap.putPair(createPair(""12"", ""Bill"", ""Doe"", 19))
    Call personMap.putPair(createPair(""13"", ""Bob"", ""Doe"", 17))
    Call personMap.putPair(createPair(""14"", ""Ben"", ""Doe"", 10))

    Dim filter as New PersonFilter()
    Dim compar as New MatchingDataTypeComparator(false)
    Dim tempMap as Map
    Dim tempPerson as Person
    Dim key as String
    Dim i as Long
    Dim sortedPersonMap as New Map(""PERSON"", compar, True)

    Set tempMap = personMap.filter(filter)
    Do
        Set tempPerson = tempMap.getNthValueRaw(i)
        key = Format(tempPerson.age, ""00"") & "","" & tempPerson.firstName & "" "" & tempPerson.lastName & "","" & tempPerson.key
        Call sortedPersonMap.put(key, tempPerson)
    Loop While ++i < tempMap.elementCount

    Print ""===Keys===""
    i = 0
    Do
        Print sortedPersonMap.getNthKeyRaw(i)
    Loop While ++i < sortedPersonMap.elementCount

    Print ""===Transformed===""
    Dim transformedMap as New Map(""ALTPERSON"", Nothing, True)
    Dim transformer as New PersonTransformer()
    Dim altPerson as AltPerson
    
    Call personMap.transform(transformer, transformedMap)
    i = 0
    Do
        Set altPerson = transformedMap.getNthValueRaw(i)
        Print altPerson.fullName & "" - "" & altPerson.ageRange
    Loop While ++i < sortedPersonMap.elementCount

End Sub

Function createPair(id as String, firstName as String, lastName as String, age as Integer) as Pair

    Dim person as new Person()
    person.key = id
    person.firstName = firstName
    person.lastName = lastName
    person.age = age
    Set createPair = new Pair(id, person)

End Function"
test/collectionUnitTests.vss,"%REM
    Copyright 2022-23 HCL America, Inc.

    Licensed under the Apache License, Version 2.0 (the ""License"");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an ""AS IS"" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
%END REM
Option Declare
Use ""../src/VoltScriptCollections""
Use ""../libs/VoltScriptTesting""

Class CaseInsensitiveStringComparator as Comparator

    Sub New(isDescending as Boolean)

    End Sub
    
    Function compare(source as Variant, target as Variant) as Integer
        compare = StrCompare(source, target, 5)
    End Function

    Function equals(source as Variant, target as Variant) as Boolean
        Return StrCompare(source, target, 5) = 0
    End Function

End Class

Class EvenFilterer as CollectionFilter
    Function filter(source as Variant) as Boolean
        If (IsNumeric(source)) Then
            If (source Mod 2 = 0) Then
                filter = true
            End If
        End If
    End Function

End Class

Class Person
    Public firstName as String
    Public lastName as String
    Public age as Integer
    Public value1 as Integer
    Public value2 as Integer

    Sub New(firstName as String, lastName as String, age as Integer)
        Me.firstName = firstName
        Me.lastName = lastName
        Me.age = age
    End Sub

    Function toJson() as JsonObject
        Dim jsonObj as New JsonObject()
        Call jsonObj.insertValue(""firstName"", Me.firstName)
        Call jsonObj.insertValue(""lastName"", Me.lastName)
        Call jsonObj.insertValue(""age"", Me.age)
        Set toJson = jsonObj
    End Function

    Function toString() as String
        Return Me.firstName & "" "" & Me.lastName & "","" & Me.age & ""-"" & Me.value1 & "","" & Me.value2
    End Function
End Class

Class PersonSorter as Comparator

    Sub New(isDescending as Boolean)

    End Sub
    
    Function compare(source as Variant, target as Variant) as Integer
        compare = Me.compareMatchingDataType(CStr(source.FirstName) & ""~"" & CStr(source.LastName), CStr(target.firstName) & ""~"" & CStr(target.LastName))
        If (compare <> 0) Then return compare

        compare = Me.compareMatchingDataType(source.Age, target.Age) * -1
    End Function

    Function equals(source as Variant, target as Variant) as Boolean
        Return CStr(source.firstName) = CStr(target.firstName) &&_
            CStr(source.lastName) = CStr(target.lastName) &&_
            CStr(source.age) = CStr(target.age) &&_
            CStr(source.value1) = CStr(target.value1) &&_
            CStr(source.value2) = CStr(target.value2)
    End Function

End Class

Class PersonTransformer as CollectionTransformer
    Function transform(source as Variant) as Variant
        If (CInt(source.age) < 55) Then
            transform = CStr(source.FirstName) & "" "" & CStr(source.lastName) & "", "" & CStr(source.age)
        End If
    End Function

End Class

Public Function runCollectionTests as Boolean
    Dim testRunner as New TestRunner(""Test Collections"")
    Call testRunner.setOutputFormat(""BOTH"")
    Dim retVal as Boolean

    Try
        Call testBasicCollection(testRunner)

        Call testComparator(testRunner)

        Call testAddingCollection(testRunner)

        Call testStringCollection(testRunner)

        Call testInsertion(testRunner)

        Call testTransformSilent(testRunner)

        Call testBig(testRunner)

        Call testSortedNumerics(testRunner)

        Call testSortedStrings(testRunner)

        Call testMixedSorted(testRunner)

        Call testFilter(testRunner)

        Call testPeople(testRunner)

        Call testFromJson(testRunner)
    Catch
        Print ""Error "" & Error() & "" on line "" & Erl()
    End Try

    retVal = True
    ForAll suite in testRunner.testSuites
        retVal = retVal And suite.ranSuccessfully()
    End ForAll
    Return retVal

End Function

Sub testBasicCollection(testRunner as TestRunner)

    Dim coll as Collection
    
    Dim testSuite as New TestSuite(""Test Basic Collection"")
    Dim idex as Long
    Dim arr(2) as Variant
    Dim emptyVar as Variant
    Call testRunner.addTestSuite(testSuite)

    Call tryFailingCollection("""", testSuite, ""contentType should be a comma-delimited string of one or more explicit datatypes, or SCALAR or OBJECT"")
    Call tryFailingCollection("" "", testSuite, ""contentType should be a comma-delimited string of one or more explicit datatypes, or SCALAR or OBJECT"")
    Call tryFailingCollection(""NULL"", testSuite, ""Invalid data type for Collection: NULL"")
    Call tryFailingCollection(""EMPTY"", testSuite, ""Invalid data type for Collection: EMPTY"")
    Call tryFailingCollection(""VARIANT"", testSuite, ""Invalid data type for Collection: VARIANT"")
    Call tryFailingCollection(""NOTHING"", testSuite, ""Invalid data type for Collection: NOTHING"")
    Call tryFailingCollection(""ARRAY"", testSuite, ""Invalid data type for Collection: ARRAY"")
    Call tryFailingCollection(""LIST"", testSuite, ""Invalid data type for Collection: LIST"")
    Call tryFailingCollection(""SCALAR,STRING"", testSuite, ""SCALAR cannot be mixed with other datatypes"")
    Call tryFailingCollection(""OBJECT,STRING"", testSuite, ""OBJECT cannot be mixed with other datatypes"")
    Call tryFailingCollection(""PERSON,STRING"", testSuite, ""Invalid mixture of scalar and object datatypes"")

    Set coll = new Collection(""SCALAR"", Nothing, False, False)
    Call testSuite.describe(""Test has no content"").assertFalse(coll.hasContent)
    arr(0) = ""Two""
    arr(1) = ""one""
    arr(2) = 3

    Call testSuite.describe(""Adding to collection"")
    Try
        coll.add(""One"")
        Call coll.addAll(arr)
        coll.add(""3"")
        Call testSuite.addResult(True, """")
    Catch
        Call testSuite.addError(""Error "" & Error() & "" on line "" & Erl(), """")
        Exit Sub
    End Try

    Call testSuite.describe(""Test collection has content"").assertTrue(coll.HasContent)
    Call testSuite.describe(""Check collection has 5 elements"").assertEqualsInteger(5, coll.ElementCount)
    Call testSuite.describe(""Check removing first element"").assertEqualsString(""One"", CStr(coll.getAndRemoveFirstRaw()), False)
    Call testSuite.describe(""Check removing last element"").assertEqualsString(""3"", CStr(coll.getAndRemoveLastRaw()), False)
    Call testSuite.describe(""Check collection now has 3 elements"").assertEqualsInteger(3, coll.ElementCount)
    Call testSuite.describe(""Try adding EMPTY"")
    Try
        Call coll.add(emptyVar)
        Call testSuite.addResult(False, ""Successfully added EMPTY"")
    Catch
        Call testSuite.assertEqualsString(|This collection can only accept SCALARS, passed value is EMPTY|, Error(), False)
    End Try
    Call testSuite.describe(""Check collection still has 3 elements after adding EMPTY"").assertEqualsInteger(3, coll.ElementCount)
    Call coll.add("""")
    Call testSuite.describe(""Check collection 4 elements after adding blank string"").assertEqualsInteger(4, coll.ElementCount)

    For idex = 0 to 2
        Call testSuite.describe(""Test element "" & idex & "" is "" & arr(idex)).assertEqualsPrimitive(arr(idex), coll.getNthElementRaw(idex))
    Next

    Call testSuite.describe(""Test get invalid index is EMPTY"").assertIs(""EMPTY"", coll.getNthElementRaw(10))
End Sub

Sub tryFailingCollection(contentType as String, testSuite as TestSuite, expectedError as String)

    Call testSuite.describe(""Test "" & contentType & "" contentType"")
    Try
        Dim coll as new Collection(contentType, Nothing, False, False)
        Call testSuite.addResult(False, ""Created when should have failed"")
    Catch
        Call testSuite.assertEqualsString(expectedError, Error(), False)
    End Try

End Sub

Sub testComparator(testRunner as TestRunner)
    Dim testSuite as New TestSuite(""Test string insensitive comparator collection"")
    Call testRunner.addTestSuite(testSuite)
    Dim coll as New Collection(""STRING"", Nothing, False, False)
    
    Call coll.add(""Two"")
    Call coll.add(""one"")
    Call coll.add(""One"")
    Call coll.add(""three"")

    Dim passCompar as New CaseInsensitiveStringComparator(false)
    Dim newColl as New Collection(""STRING"", passCompar, True, False)
    Call testSuite.describe(""Test adding a collection"")
    Try
        Call newColl.addAll(coll)
        Call testSuite.addResult(True, """")
    Catch
        Call testSuite.addError(""Error "" & Error() & "" on line "" & Erl(), """")
        Exit Sub
    End Try

    Call testSuite.describe(""Check case insensitive unique coll has three elements"").assertEqualsInteger(3, newColl.ElementCount)
        
End Sub

Sub testAddingCollection(testRunner as TestRunner)
    Dim testSuite as New TestSuite(""Test adding collections"")
    Call testRunner.addTestSuite(testSuite)
    
    Dim newColl as New Collection(""STRING,INTEGER"", Nothing, True, False)
    Dim coll as New Collection(""SCALAR"", Nothing, False, False)
    
    Call coll.add(""Two"")
    Call coll.add(""one"")
    Call coll.add(""One"")
    
    newColl.add(""Four"")
    newColl.add(5)
    coll.add(5)

    Call testSuite.describe(""Test adding a collection"")
    Try
        Call newColl.addAll(coll)
        Call testSuite.addResult(True, """")
    Catch
        Call testSuite.addError(""Error "" & Error() & "" on line "" & Erl(), """")
        Exit Sub
    End Try

    Call testSuite.describe(""Check unique newColl only has five elements"").assertEqualsInteger(5, newColl.ElementCount)
    
    Call testSuite.describe(""Test adding non-Collection object"")
    Try
        Call coll.addAll(testRunner)
        Call testSuite.addResult(False, """")
    Catch
        Call testSuite.addResult(True, """")
    End Try
    
End Sub

Sub testStringCollection(testRunner as TestRunner)

    Dim testSuite as New TestSuite(""Test String collection"")
    Call testRunner.addTestSuite(testSuite)
    Dim StringColl as New Collection(""STRING"", Nothing, True, False)
    Dim mixedColl as New Collection(""SCALAR"", Nothing, False, False)

    mixedColl.add(""One"")
    mixedColl.add(2)
    mixedColl.add(""Two"")
    
    Call testSuite.describe(""Test string collection accepts strings"")
    Try
        Call stringColl.add(""Hello"")
        Call stringColl.add(""World"")
        Call testSuite.addResult(True, """")
    Catch
        Call testSuite.addError(""Error "" & Error() & "" on line "" & Erl(), """")
    End Try
    Call testSuite.describe(""Test collection at start has 2 elements"").assertEqualsInteger(2, stringColl.ElementCount)

    Call testSuite.describe(""Test string collection won't accept number"")
    Try
        Call stringColl.add(1)
        Call testSuite.addResult(False, """")
    Catch
        Call testSuite.addResult(True, """")
    End Try
    Call testSuite.describe(""Test collection after number has 2 elements"").assertEqualsInteger(2, stringColl.ElementCount)

    Call testSuite.describe(""Test string collection will not accept variant collection"")
    Try
        Call stringColl.addAll(mixedColl)
        Call testSuite.addResult(False, ""Did not throw error"")
    Catch
        Call testSuite.addResult(True, """")
    End Try
    Call testSuite.describe(""Test collection after variant coll elements has 2 elements"").assertEqualsInteger(2, stringColl.ElementCount)

    Call testSuite.describe(""Test string collection will only accept strings from variant collection"")
    Try
        stringColl.suppressErrors = True
        Call stringColl.addAll(mixedColl)
        Call testSuite.addResult(True, """")
    Catch
        Call testSuite.addResult(False, """")
    End Try
    Call testSuite.describe(""Test collection after variant coll elements has 4 elements"").assertEqualsInteger(4, stringColl.ElementCount)

    Dim arr(1) as Variant
    arr(0) = ""Another Hello""
    arr(1) = 1
    
    Call testSuite.describe(""Test string collection won't accept variant array"")
    Try
        stringColl.suppressErrors = False
        Call stringColl.addAll(arr)
        Call testSuite.addResult(False, """")
    Catch
        Call testSuite.addResult(True, """")
    End Try
    Call testSuite.describe(""Test collection after variant array has 4 elements"").assertEqualsInteger(4, stringColl.ElementCount)
    
    Call testSuite.describe(""Test string collection will accept variant array with suppressErrors"")
    Try
        stringColl.suppressErrors = True
        Call stringColl.addAll(arr)
        Call testSuite.addResult(True, """")
    Catch
        Call testSuite.addError("""", Error())
    End Try
    Call testSuite.describe(""Test collection after variant array has 5 elements"").assertEqualsInteger(5, stringColl.ElementCount)
        
End Sub

Sub testInsertion(testRunner as TestRunner)

    Dim i as Integer
    Dim testSuite as New TestSuite(""Test Insertion"")
    Dim replaceCount as Long
    Call testRunner.addTestSuite(testSuite)

    Dim coll as New Collection(""SCALAR"", Nothing, False, False)
    Dim newColl as New Collection(""STRING"", Nothing, false, false)

    Call coll.add(""One"")
    Call coll.add(""Two"")
    Call coll.add(""Three"")

    Call testSuite.describe(""Test third element is Three"").assertEqualsString(""Three"", Cstr(coll.getNthElementRaw(2)), false)

    Call coll.insertAt(""Four"", 2)
    Call testSuite.describe(""Test third element is now Four"").assertEqualsString(""Four"", Cstr(coll.getNthElementRaw(2)), false)

    Call coll.add(""Two"")
    Call coll.add(""Three"")
    Call coll.add(""Two"")
    Call coll.remove(""Two"", false)
    Call testSuite.describe(""Test remove first match"").assertEqualsInteger(6, coll.ElementCount)

    Call coll.remove(""Three"", true)
    Call testSuite.describe(""Test remove all matches"").assertEqualsInteger(4, coll.ElementCount)

    replaceCount = coll.replace(""Four"", 4, false)
    Call testSuite.describe(""Test Four has been changed to 4"").assertEqualsInteger(4, coll.getNthElementRaw(1))
    Call testSuite.describe(""Check one replacement made"").assertEqualsLong(1, replaceCount)

    replaceCount = coll.replace(""Two"", 2, true)
    Call testSuite.describe(""Test two has been changed to 2"").assertEqualsInteger(2, coll.getNthElementRaw(coll.elementCount - 1))
    Call testSuite.describe(""Check two replacements made"").assertEqualsLong(2, replaceCount)

    Call coll.lock()
    Call testSuite.describe(""Test collection is locked"").assertTrue(coll.isLocked)

    Call testSuite.describe(""Test collection does not allow adding when locked"")
    Try
        Call coll.add(5)
        Call testSuite.addResult(false, """")
    Catch
        Call testSuite.addResult(true, """")
    End Try

    Call testSuite.describe(""Test collection does not allow adding all when locked"")
    Try
        Call coll.addAll(newColl)
        Call testSuite.addResult(false, """")
    Catch
        Call testSuite.addResult(true, """")
    End Try

    Call testSuite.describe(""Test collection does not allow removing first when locked"")
    Try
        Call coll.getAndRemoveFirstRaw()
        Call testSuite.addResult(false, """")
    Catch
        Call testSuite.addResult(true, """")
    End Try

    Call testSuite.describe(""Test collection does not allow removing last when locked"")
    Try
        Call coll.getAndRemoveLastRaw()
        Call testSuite.addResult(false, """")
    Catch
        Call testSuite.addResult(true, """")
    End Try

    Call testSuite.describe(""Test collection does not allow insertAt when locked"")
    Try
        Call coll.insertAt(""foo"", 3)
        Call testSuite.addResult(false, """")
    Catch
        Call testSuite.addResult(true, """")
    End Try

    Call testSuite.describe(""Test collection does not allow clear when locked"")
    Try
        Call coll.clear()
        Call testSuite.addResult(false, """")
    Catch
        Call testSuite.addResult(true, """")
    End Try

    Call testSuite.describe(""Test collection does not allow remove element when locked"")
    Try
        Call coll.remove(2, true)
        Call testSuite.addResult(false, """")
    Catch
        Call testSuite.addResult(true, """")
    End Try

    Call testSuite.describe(""Test collection does not allow replace element when locked"")
    Try
        Call coll.replace(3, ""Three"", true)
        Call testSuite.addResult(false, """")
    Catch
        Call testSuite.addResult(true, """")
    End Try

    Call testSuite.describe(""Test collection does not allow reverse when locked"")
    Try
        Call coll.reverse()
        Call testSuite.addResult(false, """")
    Catch
        Call testSuite.addResult(true, """")
    End Try

    Call coll.unlock
    Call testSuite.describe(""Test adding again"")
    Try
        Call coll.add(""4"")
        Call testSuite.addResult(true, """")
    Catch
        Call testSuite.addResult(false, """")
    End Try

    Call coll.clear()
    Call testSuite.describe(""Test collection cleared"").assertFalse(coll.hasContent)
    Call testSuite.describe(""Test collection has 0 elements"").assertFalse(coll.elementCount)

    Set coll = New Collection(""INTEGER"", Nothing, False, True)
    Call coll.add(1)
    Call coll.add(2)
    Call coll.add(6)
    Call coll.add(1)
    Call coll.replace(1, 4, True)
    Call testSuite.describe(""Test collection still has four elements"").assertEqualsLong(4, coll.elementCount)
    Call testSuite.describe(""Test collection is ordered correctly"").assertEqualsString(""2,4,4,6"", coll.join("",""), True)
        
End Sub

Sub testBig(testRunner as TestRunner)

    Dim x as Long
    Dim temp as Long
    Dim testSuite as New TestSuite(""Test big collection"")
    Dim coll as New Collection(""LONG"", Nothing, False, False)

    Call testRunner.addTestSuite(testSuite)
    Call testSuite.describe(""Test adding 671 elements"")
    Try
        For x = 0 to 670
            coll.add(temp)
            temp += 3
        Next
        Call testSuite.addResult(True, """")
    Catch
        Call testSuite.addError(""Error "" & Error() & "" on line "" & Erl(), """")
    End Try
    Call testSuite.describe(""Verify collection contains 671 elements"").assertEqualsInteger(671, coll.ElementCount)

    Set coll = New Collection(""LONG"", Nothing, False, False)
    Call testSuite.describe(""Test adding 6701 elements"")
    Try
        For x = 0 to 6700
            coll.add(temp)
            temp += 3
        Next
        Call testSuite.addResult(True, """")
    Catch
        Call testSuite.addError(""Error "" & Error() & "" on line "" & Erl(), """")
    End Try
    Call testSuite.describe(""Verify collection contains 6701 elements"").assertEqualsInteger(6701, coll.ElementCount)

    Set coll = New Collection(""LONG"", Nothing, False, False)
    Call testSuite.describe(""Test adding 3550 elements"")
    Try
        For x = 0 to 3549
            coll.add(temp)
            temp += 3
        Next
        Call testSuite.addResult(True, """")
    Catch
        Call testSuite.addError(""Error "" & Error() & "" on line "" & Erl(), """")
    End Try
    Call testSuite.describe(""Verify collection contains 3550 elements"").assertEqualsInteger(3550, coll.ElementCount)

    Dim startTm as Variant, endTm as Variant
    startTm = Now
    Print ""Starting adding 20000 at "" & startTm
    Set coll = New Collection(""LONG"", Nothing, False, False)
    Call testSuite.describe(""Test adding 20001 elements"")
    temp = 0
    Try
        For x = 0 to 20000
            coll.add(temp)
            temp++
        Next
        Call testSuite.addResult(True, """")
    Catch
        Call testSuite.addError(""Error "" & Error() & "" on line "" & Erl(), """")
    End Try
    Call testSuite.describe(""Verify collection contains 20001 elements"").assertEqualsLong(20001, coll.ElementCount)
    endTm = Now
    Print ""Finished adding 20000 at "" & endTm 
    Print (endTm - startTm) / 20000

    Call coll.reverse()
    startTm = Now
    Print ""Coll reversed at "" & Now()
    Call testSuite.describe(""Verify first element is 20000"").assertEqualsLong(20000, coll.getNthElementRaw(0))
    Call testSuite.describe(""Verify last element is 0"").assertEqualsLong(0, coll.getNthElementRaw(20001))
    Print ""Got first and last at "" & Now()
End Sub

Sub testSortedNumerics(testRunner as TestRunner)

    Dim x as Integer
    Dim temp as Integer
    Dim testSuite as New TestSuite(""Test Sorted numerics"")
    Call testRunner.addTestSuite(testSuite)
    
    Dim coll as New Collection(""INTEGER"", Nothing, False, True)
    Dim reverseComparator as New Comparator(true)
    Dim reverseColl as New Collection(""INTEGER"", reverseComparator, False, True)
    For x = 0 to 10
        coll.add(temp)
        temp += 3
    Next
    coll.add(90)
    Call testSuite.describe(""Test 90 inserted at end"").assertEqualsInteger(90, coll.getNthElementRaw(11))

    coll.add(-1)
    Call testSuite.describe(""Test -1 inserted at start"").assertEqualsInteger(-1, coll.getNthElementRaw(0))

    coll.add(13)
    Call testSuite.describe(""Test 13 inserted as 7th element"").assertEqualsInteger(13, coll.getNthElementRaw(6))
    Call testSuite.describe(""Check comparator is ascending"").assertFalse(coll.Comparator.isDescending)
    
    Call coll.reverse()
    Call testSuite.describe(""Check reverse of collection"").assertEqualsString(""90,30,27,24,21,18,15,13,12,9,6,3,0,-1"", coll.join("",""), false)
    
    Call coll.add(26)
    Call testSuite.describe(""Check 26 inserted at position 4"").assertEqualsInteger(26, coll.getNthElementRaw(3))
    
    temp = 0
    For x = 0 to 10
        reverseColl.add(temp)
        temp += 3
    Next
    Call testSuite.describe(""Test 30 inserted at start"").assertEqualsInteger(30, reverseColl.getNthElementRaw(0))
    Call testSuite.describe(""Test 0 inserted at end"").assertEqualsInteger(0, reverseColl.getNthElementRaw(10))
    
    reverseColl.add(90)
    Call testSuite.describe(""Test 90 inserted at start"").assertEqualsInteger(90, reverseColl.getNthElementRaw(0))

    reverseColl.add(-1)
    Call testSuite.describe(""Test -1 inserted at end"").assertEqualsInteger(-1, reverseColl.getNthElementRaw(12))

    reverseColl.add(13)
    Call testSuite.describe(""Test 8th element is 13"").assertEqualsInteger(13, reverseColl.getNthElementRaw(7))

    Call reverseColl.reverse()
    Call testSuite.describe(""Check reverse of collection"").assertEqualsString(""-1,0,3,6,9,12,13,15,18,21,24,27,30,90"", reverseColl.join("",""), false)
    Call reverseColl.add(26)
    Call testSuite.describe(""Check 12th element is 26"").assertEqualsInteger(26, reverseColl.getNthElementRaw(11))

End Sub

Sub testSortedStrings(testRunner as TestRunner)
    Dim coll as New Collection(""STRING"", Nothing, False, True)
    Dim reverseComparator as New CaseInsensitiveStringComparator(true)
    Dim reverseColl as New Collection(""STRING"", reverseComparator, True, True)

    Dim testSuite as New TestSuite(""Test Sorted strings"")
    Call testRunner.addTestSuite(testSuite)
    Dim sentence as String
    Dim arr as Variant

    sentence = ""The quick brown fox jumped over the lazy dog""
    arr = Split(sentence, "" "")
    ForAll strings in arr
        coll.add(strings)
        reverseColl.add(strings)
    End ForAll

    Call testSuite.describe(""Check coll has 9 elements"").assertEqualsInteger(9, coll.ElementCount)
    Call testSuite.describe(""Check reverseColl has 8 elements"").assertEqualsInteger(8, reverseColl.ElementCount)

    Call testSuite.describe(""Test brown is first word in coll"").assertEqualsString(""brown"", coll.getNthElementRaw(0), true)
    Call testSuite.describe(""Test 7th word is quick"").assertEqualsString(""quick"", coll.getNthElementRaw(6), true)

    Call testSuite.describe(""Test the is first word of reverseColl"").assertEqualsString(""the"", reverseColl.getNthElementRaw(0), true)
    Call testSuite.describe(""Test fox is the 6th word of reverseColl"").assertEqualsString(""fox"", reverseColl.getNthElementRaw(5), true)
    Call testSuite.describe(""Test brown is the 8th word of reverseColl"").assertEqualsString(""brown"", reverseColl.getNthElementRaw(7), true)

    Call testSuite.describe(""Test contains invalid value"").assertFalse(reverseColl.contains(""aaaaa""))
    Call testSuite.describe(""Test contains brown"").assertTrue(reverseColl.contains(""brown""))
End Sub

Sub testMixedSorted(testRunner as TestRunner)
    Dim coll as New Collection(""SCALAR"", Nothing, True, True)

    Dim testSuite as New TestSuite(""Test Mixed Sorted"")
    Call testRunner.addTestSuite(testSuite)

    Call coll.add(""Hello"")
    Call coll.add(""World"")
    Call coll.add(""2"")
    Call coll.add(2)
    Call coll.add(""One"")
    Call coll.add(True)
    Call coll.add(False)
    Call coll.add(10)
    Call coll.add(12.25)
    Call coll.add(12.57)
    Call coll.add(13.12)
    Call coll.add(11.12)
    Call coll.add(""10"")
    Call coll.add(""2"")

    Call testSuite.describe(""Test collection contains 13 elements"").assertEqualsInteger(13, coll.ElementCount)
    Call testSuite.describe(""Test sorted correctly"").assertEqualsString(""2,10,11.12,12.25,12.57,13.12,10,2,Hello,One,World,False,True"", coll.join("",""), false)
End Sub

Sub testFilter(testRunner as TestRunner)
    Dim coll as New Collection(""INTEGER"", Nothing, True, True)
    Dim filtered as Collection
    Dim evenFilter as new EvenFilterer()
    Dim i as Integer
    Dim temp as Integer

    Dim testSuite as New TestSuite(""Test Filters"")
    Call testRunner.addTestSuite(testSuite)

    For i = 0 to 10
        coll.add(temp++)
    Next

    Call testSuite.describe(""Test coll has 11 elements"").assertEqualsLong(11, coll.ElementCount)
    Set filtered = coll.filter(evenFilter)
    Call testSuite.describe(""Test filter returns 6 elements"").assertEqualsLong(6, filtered.ElementCount)
    Call testSuite.describe(""Test filter contents"").assertEqualsString(""0,2,4,6,8,10"", filtered.join("",""), false)

End Sub

Sub testPeople(testRunner as TestRunner)
    Dim personSorter as New PersonSorter(False)
    Dim sortedColl as New Collection(""PERSON"", personSorter, True, True)
    Dim person as Person
    Dim coll as New Collection(""PERSON"", personSorter, False, False)
    Dim personTransformer as New PersonTransformer()
    Dim transformedColl as New Collection(""STRING"", Nothing, True, False)

    Dim testSuite as New TestSuite(""Test People Sorted"")
    Call testRunner.addTestSuite(testSuite)

    Set person = New Person(""John"", ""Doe"", 42)
    Call coll.add(person)
    Call sortedColl.add(person)

    Set person = New Person(""Jane"", ""Doe"", 30)
    Call coll.add(person)
    Call sortedColl.add(person)

    Set person = New Person(""Steve"", ""Smith"", 60)
    Call coll.add(person)
    Call sortedColl.add(person)

    Set person = coll.getNthElementRaw(1)
    Call testSuite.describe(""Test unsorted second person is Jane Doe"").assertEqualsString(""Jane Doe"", person.firstName & "" "" & person.lastName, false)
    
    Set person = sortedColl.getNthElementRaw(1)
    Call testSuite.describe(""Test sorted second person is John Doe"").assertEqualsString(""John Doe"", person.firstName & "" "" & person.lastName, false)

    Set person = New Person(""Jane"", ""Doe"", 32)
    Call sortedColl.add(person)
    Set person = sortedColl.getNthElementRaw(0)
    Call testSuite.describe(""Test sorted first person is Jane Doe 32"").assertEqualsString(""Jane Doe - 32"", person.firstName & "" "" & person.lastName & "" - "" & person.age, false)

    transformedColl.suppressErrors = True
    Call sortedColl.transform(personTransformer, transformedColl)
    Call testSuite.describe(""Test second person is Jane Doe, 30"").assertEqualsString(""Jane Doe, 30"", transformedColl.getNthElementRaw(1), false)
    Call testSuite.describe(""Test transformed has only 3 elements"").assertEqualsLong(3, transformedColl.ElementCount)

    Set person = New Person(""Steve"", ""Smith"", 60)
    Call testSuite.describe(""Test coll contains Steve Smith"").assertTrue(coll.contains(person))
    Call testSuite.describe(""Test sortedColl contains Steve Smith"").assertTrue(sortedColl.contains(person))

    Set person = coll.getNthElementRaw(12)
    Call testSuite.describe(""Test get invalid index is NOTHING"").assertTrue(person is Nothing)
    Set person = New Person(""John"", ""Doe"", 42)

    Set person = New Person(""John"", ""Doe"", 42)
    person.value1 = 1
    person.value2 = 1
    Call sortedColl.add(person)
    Call testSuite.describe(""Test sortedColl has 5 entries"").assertEqualsInteger(5, sortedColl.elementCount)
    Call testSuite.describe(""Check insertion is as at pos 3"").assertEqualsInteger(1, sortedColl.getNthElementRaw(3).value1)
    Set person = New Person(""John"", ""Doe"", 42)
    Set person = New Person(""John"", ""Doe"", 42)
    person.value1 = 2
    person.value2 = 2
    Call sortedColl.add(person)
    Call testSuite.describe(""Test sortedColl has 6 entries"").assertEqualsInteger(6, sortedColl.elementCount)
    Call testSuite.describe(""Check insertion is as at pos 4"").assertEqualsInteger(2, sortedColl.getNthElementRaw(4).value1)
    Set person = New Person(""John"", ""Doe"", 42)
    person.value1 = 3
    person.value2 = 3
    Call testSuite.describe(""Check John Doe 42, 3, 3 is null index in sortedColl"").assertTrue(IsNull(sortedColl.getIndex(person)))
    Call testSuite.describe(""Check John Doe 42, 3, 3 is not in sortedColl"").assertFalse(sortedColl.contains(person))
    Set person = New Person(""John"", ""Doe"", 42)
    person.value1 = 0
    person.value2 = 0
    Call testSuite.describe(""Check John Doe 42, 0, 0 is at index 2"").assertEqualsLong(2, sortedColl.getIndex(person))
    Call sortedColl.add(person)
    Set person = New Person(""John"", ""Doe"", 42)
    person.value1 = 1
    person.value2 = 1
    Call sortedColl.add(person)
    Set person = New Person(""John"", ""Doe"", 42)
    person.value1 = 2
    person.value2 = 2
    Call sortedColl.add(person)
    Call testSuite.describe(""Test sortedColl still has 6 entries"").assertEqualsInteger(6, sortedColl.elementCount)

    Call sortedColl.remove(person, False)
    Call testSuite.describe(""Test sortedColl now has 5 entries"").assertEqualsInteger(5, sortedColl.elementCount)
    Call testSuite.describe(""Test person removed"")
    Dim found as Boolean
    Dim i as Long
    Do
        Set person = sortedColl.getNthElementRaw(i)
        If (person.value1 = 2) then found = True
    Loop Until ++i = sortedColl.elementCount
    Call testSuite.assertFalse(found)

    Set person = New Person(""John"", ""Doe"", 42)
    person.value1 = 1
    person.value2 = 1
    Dim newPerson as New Person(""John"", ""Smith"", 42)
    person.value1 = 1
    person.value2 = 1
    Call sortedColl.replace(person, newPerson, False)
    Call testSuite.describe(""Test sortedColl still has 5 entries"").assertEqualsInteger(5, sortedColl.elementCount)
    Call testSuite.describe(""Check collection no longer contains person"").assertFalse(sortedColl.contains(person))
    Call testSuite.describe(""Check collection now contains newPerson"").assertTrue(sortedColl.contains(newPerson))

End Sub

Function testFromJson(testRunner as TestRunner)

    Dim testSuite as New TestSuite(""Test JSON loading"")
    Call testRunner.addTestSuite(testSuite)

    Dim coll as New Collection(""STRING"", Nothing, false, false)
    Dim jsonObj as New JsonObject()
    Call jsonObj.appendToJsonArray(""Hello"")
    Call jsonObj.appendToJsonArray(""Brave"")
    Call jsonObj.appendToJsonArray(""New"")
    Call jsonObj.appendToJsonArray(""World"")

    Call testSuite.describe(""Loading from JsonObject array"")
    Try
        Call coll.fromJson(jsonObj)
        Call testSuite.addResult(true, """")
    Catch
        Call testSuite.addError(""Error "" & Error() & "" on line "" & Erl(), """")
    End Try

    Call testSuite.describe(""Test collection has four elements"").assertEqualsLong(4, coll.elementCount)

%REM
Currently causes crash
    Dim badJson as New JsonObject()
    Call badJson.insertValue(""Hello"", ""World"")
    Call testSuite.describe(""Try loading from JsonObject"")
    Try
        Call coll.fromJson(badJson)
        Call testSuite.addResult(false, """")
    Catch
        Call testSuite.addResult(true, """")
    End Try

    Set badJson = New JsonObject()
    Call badJson.appendToJsonArray(jsonObj)
    Call badJson.appendToJsonArray(jsonObj)
    Call testSuite.describe(""Try loading from JsonObject array of objects"")
    Try
        Call coll.fromJson(badJson)
        Call testSuite.addResult(false, """")
    Catch
        Call testSuite.addResult(true, """")
    End Try
%END REM

    Set coll = new Collection(""INTEGER"", Nothing, False, False)
    coll.add(1)
    coll.add(2)
    coll.add(3)

    Call testSuite.describe(""Test converting basic collection to JSON"")
    Try
        Set jsonObj = coll.toJson()
        Call testSuite.addResult(True, """")
    Catch
        Call testSuite.addError(""Error "" & Error() & "" on line "" & Erl(), """")
    End Try
    Call testSuite.describe(""Test JSON output"").assertEqualsString(|[1,2,3]|, jsonObj.toString(false), false)

    Call coll.cle"
test/mapUnitTests.vss,"%REM
    Copyright 2022-23 HCL America, Inc.

    Licensed under the Apache License, Version 2.0 (the ""License"");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an ""AS IS"" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
%END REM
Option Declare
Use ""../src/VoltScriptCollections""
Use ""../libs/VoltScriptTesting""

Class DoeFilter as MapFilter

    Function filter(kvPair as Pair) as Boolean
        filter = CStr(kvPair.key) Like ""*D""
    End Function

End Class

Class Person
    Public firstName as String
    Public lastName as String
    Public age as Integer
    Public value1 as Integer
    Public value2 as Integer

    Sub New(firstName as String, lastName as String, age as Integer)
        Me.firstName = firstName
        Me.lastName = lastName
        Me.age = age
    End Sub

    Function toJson() as JsonObject
        Dim jsonObj as New JsonObject()
        Call jsonObj.insertValue(""firstName"", Me.firstName)
        Call jsonObj.insertValue(""lastName"", Me.lastName)
        Call jsonObj.insertValue(""age"", Me.age)
        Set toJson = jsonObj
    End Function
End Class

Class PersonTransformer as MapTransformer

    Function transform(kvPair as Pair) as Pair
        Dim person as Person
        Set person = kvPair.value
        If (person.age > 40) Then
            Set transform = new Pair(kvPair.key, person.lastName & "", "" & person.firstName & "" ("" & person.age & "")"")
        End If
    End Function

End Class

Class PersonSorter as Comparator

    Sub New(isDescending as Boolean)

    End Sub
    
    Function compare(source as Variant, target as Variant) as Integer
        compare = Me.compareMatchingDataType(CStr(source.FirstName) & ""~"" & CStr(source.LastName), CStr(target.firstName) & ""~"" & CStr(target.LastName))
        If (compare <> 0) Then Exit Function

        compare = Me.compareMatchingDataType(source.Age, target.Age)
    End Function

    Function equals(source as Variant, target as Variant) as Boolean
        Return CStr(source.firstName) = CStr(target.firstName) &&_
            CStr(source.lastName) = CStr(target.lastName) &&_
            CStr(source.age) = CStr(target.age) &&_
            CStr(source.value1) = CStr(target.value1) &&_
            CStr(source.value2) = CStr(target.value2)
    End Function

End Class

Public Function runMapTests

    Dim testRunner as New TestRunner(""Test Maps"")
    Call testRunner.setOutputFormat(""BOTH"")
    Dim retVal as Boolean

    Try
        Call testBasicMap(testRunner)
        Call testSort(testRunner)
        Call testRestrictions(testRunner)
        Call testPersonMap(testRunner)
        Call testJson(testRunner)
        Call testSuppressErrors(testRunner)
        Call testEmptyObjects(testRunner)
    Catch
        Print ""Error "" & Error() & "" on line "" & Erl()
    End Try

    retVal = True
    ForAll suite in testRunner.testSuites
        retVal = retVal And suite.ranSuccessfully()
    End ForAll
    Return retVal

End Function

Function testBasicMap(testRunner as TestRunner)

    Dim testSuite as New TestSuite(""Test Basic Map"")
    Dim newMap as Map
    Dim i as Long
    Dim count as Integer
    Dim filter as New DoeFilter()
    Dim pair as Pair
    Dim emptyVar as Variant
    Call testRunner.addTestSuite(testSuite)

    Dim basicMap as New Map(""STRING"", Nothing, false)

    Call basicMap.put(""JohnD"", ""John Doe, 42"")
    Call basicMap.put(""JaneD"", ""Jane Doe, 30"")
    Call basicMap.put(""SS"", ""Steve Smith, 60"")
    Call testSuite.describe(""Check three elements in map"").assertEqualsLong(3, basicMap.ElementCount)
    
    Set newMap = basicMap.filter(filter)

    Set pair = basicMap.getAndRemoveFirstPair()
    Call testSuite.describe(""Test getAndRemoveFirst did not return Nothing"").assertFalse(pair is Nothing)
    Call testSuite.describe(""Check first element is John Doe, 42"").assertEqualsString(""John Doe, 42"", pair.value, false)
    Call testSuite.describe(""Check last element is Steve Smith, 60"").assertEqualsString(""Steve Smith, 60"", basicMap.getAndRemoveLastPair().value, false)
    
    Do
        count++
    Loop While ++i < basicMap.ElementCount
    Call testSuite.describe(""Check one value left"").assertEqualsInteger(1, count)

    Call testSuite.describe(""Check filtered Map has two elements"").assertEqualsLong(2, newMap.ElementCount)
    Call testSuite.describe(""Check get value by key"").assertEqualsString(""John Doe, 42"", newMap.getValueRawByKey(""JohnD""), false)

    Call testSuite.describe(""Test adding EMPTY"")
    Try
        Call basicMap.put(""EMPTY"", emptyVar)
        Call testSuite.addResult(False, ""Map accepted EMPTY"")
    Catch
        Call testSuite.addResult(true, """")
    End Try

    Call testSuite.describe(""Test adding Nothing"")
    Try
        Call basicMap.put(""Nothing"", Nothing)
        Call testSuite.addResult(False, ""Map accepted Nothing"")
    Catch
        Call testSuite.addResult(True, """")
    End Try

End Function

Function testSort(testRunner as TestRunner)

    Dim testSuite as New TestSuite(""Test Pairs and Reverse"")
    Call testRunner.addTestSuite(testSuite)
    Dim state as Pair
    Dim success as Boolean
    Dim i as Long

    Dim basicMap as New Map(""STRING"", Nothing, true)
    Call basicMap.put(""AZ"", ""Arizona"")
    Call basicMap.put(""FL"", ""Florida"")
    Call basicMap.put(""IO"", ""Iowa"")
    Call basicMap.put(""NE"", ""Nebraska"")
    Call basicMap.put(""PA"", ""Pennsylvania"")
    Call basicMap.put(""AL"", ""Alabama"")
    Call basicMap.put(""CA"", ""California"")
    Call basicMap.put(""NY"", ""New York"")
    Call basicMap.put(""WA"", ""Washington"")
    Call basicMap.put(""CO"", ""Colorado"")
    Call basicMap.put(""AR"", ""Arkansas"")
    Call basicMap.put(""GA"", ""Georgia"")
    Call basicMap.put(""KA"", ""Kansas"")
    Call basicMap.put(""KY"", ""KJentucky"")
    Call basicMap.put(""IN"", ""Indiana"")
    Call basicMap.put(""DE"", ""Delaware"")

    Call testSuite.describe(""Test 16 elements"").assertEqualsLong(16, basicMap.elementCount)
    Call testSuite.describe(""Test last key is WA"").assertEqualsString(""WA"", basicMap.getNthKeyRaw(15), false)
    Dim coll as Collection
    Set coll = basicMap.collectKeys()
    Call testSuite.describe(""Test last on collectKeys is WA"").assertEqualsString(""WA"", basicMap.getNthKeyRaw(15), false)
    Call testSuite.describe(""Test last value is Washington"").assertEqualsString(""Washington"", basicMap.getNthValueRaw(15), false)
    Call testSuite.describe(""Test KY value is KJentucky"").assertEqualsString(""KJentucky"", basicMap.getValueRawByKey(""KY""), false)
    Set state = new Pair(""AK"", ""Alaska"")
    Call basicMap.putPair(state)
    Call testSuite.describe(""Test first element now Alaska"").assertEqualsString(""Alaska"", basicMap.getNthValueRaw(0), false)

    Call basicMap.put(""KY"", ""Kentucky"")
    Call testSuite.describe(""Test element count is 17"").assertEqualsLong(17, basicMap.elementCount)
    Set state = basicMap.getNthPair(6)
    Call testSuite.describe(""Test returned key is DE"").assertEqualsString(""DE"", state.key, false)
    Call testSuite.describe(""Test returned value is Delaware"").assertEqualsString(""Delaware"", state.value, false)
    
    Call basicMap.reverse()
    Call testSuite.describe(""Test first element is now Washington"").assertEqualsString(""WA"", basicMap.getNthKeyRaw(0), false)
    Call basicMap.putPair(state)
    Call testSuite.describe(""Test element count is still 17"").assertEqualsLong(17, basicMap.elementCount)
    Set state = new Pair(""NM"", ""New MNexico"")
    Call basicMap.putPair(state)
    Call testSuite.describe(""Test New Mexico at position 3"").assertEqualsString(""New MNexico"", basicMap.getNthValueRaw(3), false)
    Set state = new Pair(""NM"", ""New Mexico"")
    Call basicMap.putPair(state)
    Call testSuite.describe(""Test updated New Mexico at position 3"").assertEqualsString(""New Mexico"", basicMap.getNthValueRaw(3), false)

    Call testSuite.describe(""Test removeByKey NM returned success"").assertTrue(basicMap.removeByKey(""NM""))
    Call testSuite.describe(""Test removed NM"").assertFalse(basicMap.containsKey(""NM""))
    Call testSuite.describe(""Test removeByKey NM failed"").assertFalse(basicMap.removeByKey(""NM""))

    Call testSuite.describe(""Test removeByValue Washington returned success"").assertTrue(basicMap.removeByValue(""Washington"", False, Nothing))
    Call testSuite.describe(""Test removed Washington"").assertFalse(basicMap.contains(""Washington"", Nothing))
    Call testSuite.describe(""Test removeByValue Washington failed"").assertFalse(basicMap.removeByValue(""Washington"", False, Nothing))

End Function

Function testRestrictions(testRunner as TestRunner)

    Dim testSuite as New TestSuite(""Test Restrictions"")
    Call testRunner.addTestSuite(testSuite)

    Dim basicMap as New Map(""STRING"", Nothing, true)
    Dim newMap as New Map(""STRING"", Nothing, true)
    Call basicMap.put(""AZ"", ""Arizona"")
    Call basicMap.put(""FL"", ""Florida"")
    Call basicMap.put(""IO"", ""Iowa"")
    Call basicMap.put(""NE"", ""Nebraska"")
    Call basicMap.put(""PA"", ""Pennsylvania"")
    
    Call testSuite.describe(""Test locking"")
    Try
        Call basicMap.lock()
        Call testSuite.assertTrue(basicMap.isLocked)
    Catch
        Call testSuite.addError(""Error "" & Error() & "" on line "" & Erl(), """")
    End Try

    Call testSuite.describe(""Test map does not allow putting when locked"")
    Try
        Call basicMap.put(""WA"", ""Washington"")
        Call testSuite.addResult(false, """")
    Catch
        Call testSuite.addResult(true, """")
    End Try
    

    Call testSuite.describe(""Test map does not allow putting all when locked"")
    Try
        Call basicMap.putAll(newMap)
        Call testSuite.addResult(false, """")
    Catch
        Call testSuite.addResult(true, """")
    End Try

    Call testSuite.describe(""Test map does not allow clear when locked"")
    Try
        Call basicMap.clear()
        Call testSuite.addResult(false, """")
    Catch
        Call testSuite.addResult(true, """")
    End Try

    Call testSuite.describe(""Test collection does not allow removing first when locked"")
    Try
        Call basicMap.getAndRemoveFirstPair()
        Call testSuite.addResult(false, """")
    Catch
        Call testSuite.addResult(true, """")
    End Try

    Call testSuite.describe(""Test collection does not allow removing last when locked"")
    Try
        Call basicMap.getAndRemoveLastPair()
        Call testSuite.addResult(false, """")
    Catch
        Call testSuite.addResult(true, """")
    End Try

    Call testSuite.describe(""Test map does not allow remove by key when locked"")
    Try
        Call basicMap.removeByKey(""foo"")
        Call testSuite.addResult(false, """")
    Catch
        Call testSuite.addResult(true, """")
    End Try

    Call testSuite.describe(""Test map does not allow remove by value when locked"")
    Try
        Call basicMap.removeByValue(""Washington"", true, Nothing)
        Call testSuite.addResult(false, """")
    Catch
        Call testSuite.addResult(true, """")
    End Try

    Call testSuite.describe(""Test map does not allow reverse when locked"")
    Try
        Call basicMap.reverse()
        Call testSuite.addResult(false, """")
    Catch
        Call testSuite.addResult(true, """")
    End Try

    Call basicMap.unlock
    Call testSuite.describe(""Test adding again"")
    Try
        Call basicMap.put(""WA"", ""Washington"")
        Call testSuite.addResult(true, """")
    Catch
        Call testSuite.addError("""", Error)
    End Try

    Call basicMap.clear()
    Call testSuite.describe(""Test map cleared"").assertFalse(basicMap.hasContent)

End Function

Function testPersonMap(testRunner as TestRunner)

    Dim map1 as New Map(""PERSON"", Nothing, True)
    Dim map2 as New Map(""PERSON"", Nothing, False)
    Dim descStringComparator as New MatchingDataTypeComparator(true)
    Dim map3 as New Map(""STRING"", descStringComparator, True)
    Dim transformer as New PersonTransformer()

    Dim testSuite as New TestSuite(""Test Person Map"")
    Call testRunner.addTestSuite(testSuite)

    Call loadPerson(map1, ""Steward"",""Swannick"",62)
    Call loadPerson(map1, ""Ethyl"",""Kroll"",35)
    Call loadPerson(map1, ""Mildred"",""Sharvill"",47)
    Call loadPerson(map1, ""Corey"",""Grinyov"",52)
    Call loadPerson(map1, ""Justinian"",""Truswell"",48)
    Call loadPerson(map1, ""Shaylyn"",""Wombwell"",47)
    Call loadPerson(map1, ""Montgomery"",""Emma"",48)
    Call loadPerson(map1, ""Rey"",""Flint"",71)
    Call loadPerson(map1, ""Thorny"",""Boards"",84)
    Call loadPerson(map1, ""Devin"",""Balsillie"",56)

    Call loadPerson(map2, ""Bernelle"",""de Pinna"",66)
    Call loadPerson(map2, ""Marion"",""Remer"",76)
    Call loadPerson(map2, ""Trstram"",""Natt"",68)
    Call loadPerson(map2, ""Lauree"",""Oldcote"",45)
    Call loadPerson(map2, ""Jeremie"",""Raulin"",20)
    Call loadPerson(map2, ""Kinsley"",""Capin"",71)
    Call loadPerson(map2, ""Pieter"",""Keech"",20)
    Call loadPerson(map2, ""Lanny"",""Rydzynski"",66)
    Call loadPerson(map2, ""Beryl"",""Bowdery"",57)
    Call loadPerson(map2, ""Krystle"",""Bausor"",54)

    Call testSuite.describe(""Test map1 contains 10 elements"").assertEqualsLong(10, map1.elementCount)
    Call testSuite.describe(""Test map2 contains 10 elements"").assertEqualsLong(10, map1.elementCount)

    Call map1.putAll(map2)
    Call testSuite.describe(""Test map1 contains 20 elements"").assertEqualsLong(20, map1.elementCount)

    Call map1.transform(transformer, map3)
    Call testSuite.describe(""Test map3 contains 17 elements"").assertEqualsLong(17, map3.elementCount)
    Call testSuite.describe(""Test first value is Natt, Trstram (68)"").assertEqualsString(""Natt, Trstram (68)"", map3.getNthValueRaw(0), false)

    Dim personSorter as New PersonSorter(false)
    Dim coll as New Collection(""PERSON"", personSorter, true, true)
    Call map1.collectValues(coll)
    Call testSuite.describe(""Test collection has 20 people in it"").assertEqualsLong(20, coll.elementCount)

    Dim person as New Person(""Krystle"",""Bausor"",54)
    Call testSuite.describe(""Test map2 contains Krystle Bausor"").assertTrue(map2.contains(person, personSorter))
    person.value1 = 1
    Call testSuite.describe(""Test map2 does not contain modified Krystle Bausor"").assertFalse(map2.contains(person, personSorter))
    person.value1 = 0
    Call testSuite.describe(""Test removing Krystle Bausor"")
    Call map2.removeByValue(person, false, personSorter)
    Call testSuite.assertEqualsLong(9, map2.elementCount)
    Set person = new Person(""Beryl"",""Bowdery"",60)
    Dim pair as New Pair(""Beryl Bowdery"", person)
    Call testSuite.describe(""Test replacing"")
    Call testSuite.assertTrue(map2.put(""Beryl Bowdery"", person) > -1)
    Call testSuite.describe(""Test map2 contains new Beryl Bowdery"").assertTrue(map2.contains(person, personSorter))

    Call testSuite.describe(""Test map1 has correct 4th element before replace"").assertEqualsString(|{""age"":56,""firstName"":""Devin"",""lastName"":""Balsillie""}|, map1.getNthValueRaw(3).toJson().toString(false), True)
    Set person = new Person(""Devin"",""Balsillie"",60)
    Call testSuite.describe(""Test replacing in sorted"")
    Call testSuite.assertTrue(map1.put(""Devin Balsillie"", person) > -1)
    Call testSuite.describe(""Test map1 contains new Devin Balsillie"").assertTrue(map1.contains(person, personSorter))
    Call testSuite.describe(""Test map1 still has 10 elements"").assertEqualsLong(20, map1.elementCount)
    Call testSuite.describe(""Test map1 has correct 4th element"").assertEqualsString(|{""age"":60,""firstName"":""Devin"",""lastName"":""Balsillie""}|, map1.getNthValueRaw(3).toJson().toString(false), True)

End Function

Function testJson(testRunner as TestRunner)

    Dim jsonObj as New JsonObject()
    Dim jsonOut as New JsonObject()
    Dim personJson as New JsonObject()
    Dim basicMap as New Map(""STRING"", Nothing, true)
    Dim testSuite as New TestSuite(""JSON Tests"")
    Call testRunner.addTestSuite(testSuite)

    Call jsonObj.insertValue(""AZ"", ""Arizona"")
    Call jsonObj.insertValue(""FL"", ""Florida"")
    Call jsonObj.insertValue(""IO"", ""Iowa"")
    Call jsonObj.insertValue(""NE"", ""Nebraska"")
    Call jsonObj.insertValue(""PA"", ""Pennsylvania"")
    Call jsonObj.insertValue(""AL"", ""Alabama"")
    Call jsonObj.insertValue(""CA"", ""California"")
    Call jsonObj.insertValue(""NY"", ""New York"")
    Call jsonObj.insertValue(""WA"", ""Washington"")
    Call jsonObj.insertValue(""CO"", ""Colorado"")
    Call jsonObj.insertValue(""AR"", ""Arkansas"")
    Call jsonObj.insertValue(""GA"", ""Georgia"")
    Call jsonObj.insertValue(""KA"", ""Kansas"")
    Call jsonObj.insertValue(""KY"", ""Kentucky"")
    Call jsonObj.insertValue(""IN"", ""Indiana"")
    Call jsonObj.insertValue(""DE"", ""Delaware"")

    Call testSuite.describe(""Test loading JsonObject into Map"")
    Try
        Call basicMap.fromJson(jsonObj)
        Call testSuite.addResult(true, """")
    Catch
        Call testSuite.addError(""Error "" & Error() & "" on line "" & Erl(), """")
    End Try

    Call testSuite.describe(""Test 16 elements"").assertEqualsLong(16, basicMap.elementCount)
    Call testSuite.describe(""Test last key is WA"").assertEqualsString(""WA"", basicMap.getNthKeyRaw(15), false)
    Call testSuite.describe(""Test last value is Washington"").assertEqualsString(""Washington"", basicMap.getNthValueRaw(15), false)
    Call testSuite.describe(""Test KY value is Kentucky"").assertEqualsString(""Kentucky"", basicMap.getValueRawByKey(""KY""), false)

    Call testSuite.describe(""Test converting Map to JsonObject"")
    Try
        Set jsonOut = basicMap.toJson()
        Call testSuite.addResult(true, """")
    Catch
        Call testSuite.addError(""Error "" & Error() & "" on line "" & Erl(), """")
    End Try

    Call testSuite.describe(""Test 16 elements in JSON"").assertEqualsInteger(16, jsonOut.childCount)
    Call testSuite.describe(""Test last key in JSON is WA"").assertEqualsString(""Washington"", CStr(jsonOut.getChild(""WA"").scalarValue), false)

    Dim map1 as New Map(""PERSON"", Nothing, False)
    Call loadPerson(map1, ""Steward"",""Swannick"",62)
    Call loadPerson(map1, ""Ethyl"",""Kroll"",35)
    Call loadPerson(map1, ""Mildred"",""Sharvill"",47)
    Call loadPerson(map1, ""Corey"",""Grinyov"",52)

    Call testSuite.describe(""Test converting Person Map to JsonObject"")
    Try
        Set personJson = map1.toJson()
        Call testSuite.addResult(true, """")
    Catch
        Call testSuite.addError(""Error "" & Error() & "" on line "" & Erl(), """")
    End Try

    Call testSuite.describe(""Test 4 elements"").assertEqualsInteger(4, personJson.childCount)
    'Map is unsorted, JSON object *is* sorted
    Call testSuite.describe(""Test first person output"").assertEqualsString(|{""age"":52,""firstName"":""Corey"",""lastName"":""Grinyov""}|, personJson.getChildren()(0).toString(false), false)

    Dim emptyJson as New JsonObject()
    Call testSuite.describe(""Test empty JsonObj to Collection"")
    Try
        Dim coll1 as New Collection(""STRING"", Nothing, False, False)
        Call coll1.fromJson(emptyJson)
        Call testSuite.assertFalse(coll1.hasContent)
    Catch
        Call testSuite.addError(""Error "" & Error() & "" on line "" & Erl(), """")
    End Try

    Call testSuite.describe(""Test empty JsonObj to Map"")
    Try
        Dim map2 as New Map(""STRING"", Nothing, False)
        Call map2.fromJson(emptyJson)
        Call testSuite.assertFalse(map2.hasContent)
    Catch
        Call testSuite.addError(""Error "" & Error() & "" on line "" & Erl(), """")
    End Try

    Call testSuite.describe(""Test serializing empty Collection"")
    Try
        Set emptyJson = coll1.toJson()
        Call testSuite.assertEqualsString(""{}"", emptyJson.toString(False), True)
    Catch
        Call testSuite.addError(""Error "" & Error() & "" on line "" & Erl(), """")
    End Try

    Call testSuite.describe(""Test serializing empty Map"")
    Try
        Set emptyJson = map2.toJson()
        Call testSuite.assertEqualsString(""{}"", emptyJson.toString(False), True)
    Catch
        Call testSuite.addError(""Error "" & Error() & "" on line "" & Erl(), """")
    End Try

End Function

Function testSuppressErrors(testRunner as TestRunner) as Boolean

    Dim testSuite as New TestSuite(""Test Suppressing Errors"")
    Call testRunner.addTestSuite(testSuite)

    Dim map1 as New Map(""SCALAR"", Nothing, False)
    Call map1.put(1, 1)
    Call map1.put(2, ""2"")
    Call testSuite.describe(""Test map1 contains 2 elements"").assertEqualsLong(2, map1.elementCount)

    Dim map2 as New Map(""string"", Nothing, false)
    Call testSuite.describe(""Test transforming Map throws error"")
    Try
        call map1.transform(Nothing, map2)
        Call testSuite.addResult(false, """")
    Catch
        Call testSuite.addResult(true, """")
    End Try

    map1.suppressErrors = true
    Call testSuite.describe(""Test transforming Map with suppressErrors doesn't throw error"")
    Try
        call map1.transform(Nothing, map2)
        Call testSuite.addResult(true, """")
    Catch
        Call testSuite.addResult(False, ""Error "" & Error & "" on line "" & Erl)
    End Try
    Call testSuite.describe(""Test only one element in StringCollection"").assertEqualsLong(1, map2.elementCount)

End Function

Function testEmptyObjects(testRunner as TestRunner) as Boolean

    Dim testSuite as New TestSuite(""Empty objects"")
    Dim pair as Pair
    Call testRunner.addTestSuite(testSuite)

    Dim Map as New Map(""OBJECT"", Nothing, False)
    Call testSuite.describe(""Test getAndRemoveFirst on Empty"")
    Try
        Set pair = map.getAndRemoveFirstPair()
        Call testSuite.addResult(True, """")
        Call testSuite.describe(""Test first pair value is Nothing"").assertTrue(pair is nothing)
    Catch
        Call testSuite.addError(Error, GetThreadInfo(12))
    End Try
    Try
        Set pair = map.getAndRemoveLastPair()
        Call testSuite.addResult(True, """")
        Call testSuite.describe(""Test last pair value is Nothing"").assertTrue(pair is nothing)
    Catch
        Call testSuite.addError(Error, GetThreadInfo(12))
    End Try
    Call testSuite.describe(""Test 12th key"").assertTrue(IsEmpty(map.getNthKeyRaw(12)))
    Call testSuite.describe(""Test 12th element"").assertTrue(map.getNthValueRaw(12) Is Nothing)
    Call testSuite.describe(""Test 12th pair value is Nothing"").assertTrue(map.getNthPair(12) is nothing)
    Call testSuite.describe(""Test bad element by key"").assertTrue(map.getValueRawByKey(200) Is Nothing)

End Function

Sub loadPerson(map as Map, firstName as String, lastName as String, age as Integer)

    Dim person as New Person(firstName, lastName, age)
    Call map.put(firstName & "" "" & lastName, person)

End Sub"
test/runAllTests.vss,"%REM
    Copyright 2022-23 HCL America, Inc.

    Licensed under the Apache License, Version 2.0 (the ""License"");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an ""AS IS"" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
%END REM
Option Declare
Option Public

Use ""collectionUnitTests""
Use ""mapUnitTests""

Sub Initialize

    Dim result as Boolean
    Dim lastResult as Boolean
    Dim tot as Long
    
    result = runCollectionTests()
    If result Then tot = 1

    lastResult = runMapTests()
    result = result And lastResult
    If lastResult then tot += 2
    
    If result Then
        Print """"
        Print ""All tests ran successfully""
    Else
        Error 1001, ""Tests Failed, tot was "" & tot & "". Check results""
    End If

End Sub"
https://help.hcltechsw.com/docs/voltscript/early-access/howto/language/loops.html,"Sub loopArray(passedArr as Variant)
    Dim i as Integer
    While i <= UBound(passedArr)
        Print passedArr(i++)
    Wend
End Sub
"
https://help.hcltechsw.com/docs/voltscript/early-access/howto/language/loops.html,"Sub loopArrayDo(passedArr as Variant)
    Dim i as Integer
    Do
        Print passedArr(i)
    Loop Until ++i > UBound(passedArr)
End Sub
"
https://help.hcltechsw.com/docs/voltscript/early-access/howto/language/loops.html,"Sub loopArrayDoPostfix(passedArr as Variant)
    Dim i as Integer
    Do
        Print passedArr(i)
    Loop Until i++ = UBound(passedArr)
End Sub
"
https://help.hcltechsw.com/docs/voltscript/early-access/howto/language/loops.html,"Sub loopArrayExitThe(passedArr as Variant)
    Dim i as Integer
    Dim the as Integer
    Do Until i > UBound(passedArr)
        If (LCase(passedArr(i)) = ""the"") Then
            If the++ > 0 Then Exit Do
        End If
        Print passedArr(i++)
    Loop
End Sub
"
https://help.hcltechsw.com/docs/voltscript/early-access/howto/language/curdir.html,"Function getCurrentWorkingDirectory() as String
    Return CurDir
End Function
"
https://help.hcltechsw.com/docs/voltscript/early-access/howto/language/errors.html,"Try
    ' Do something
End Try
"
https://help.hcltechsw.com/docs/voltscript/early-access/howto/language/errors.html,"Function catch13Error()
    Dim value as String

    value = ""Hello world""
    Try
        If (value = true) Then
            Print ""value is a boolean true""
        End If
    Catch Error 13
        Print ""Type Mismatch - value is not a boolean""
    End Try
End Function
"
https://help.hcltechsw.com/docs/voltscript/early-access/howto/language/errors.html,"Sub catchError()
    Try
        Error 22
    Catch
        Print ""Catch "" & Err() & "" on line "" & Erl()
    End Try
End Sub
"
https://help.hcltechsw.com/docs/voltscript/early-access/howto/language/errors.html,"Function tryCatchExit(throwError as boolean) as String
    Try
        If (throwError) Then Error 400, ""You wanted an error""
        Return ""Success""
    Catch
        Print ""Error "" & Error() & "" on line "" & Erl()
        Return ""Failure""
    End Try
End Function
"
https://help.hcltechsw.com/docs/voltscript/early-access/howto/language/errors.html,"Function getStack(recurse as Boolean) as String
    If (recurse) Then
        Return getStack(false)
    Else
        Print GetThreadInfo(12)
        Return GetThreadInfo(12)
    End If
End Function
"
https://help.hcltechsw.com/docs/voltscript/early-access/howto/language/errors.html,"Function doFinally(throwError as Boolean) As String
    Try
        If (throwError) Then Error 400, ""You wanted an error""
        Return ""Success""
    Catch
        Print ""Error "" & Error() & "" on line "" & Erl()
        Return ""Failure""
    Finally
        Print ""NOTE: Running in finally""
    End Try
End Function
"
https://help.hcltechsw.com/docs/voltscript/early-access/howto/language/errors.html,"Function nestTC(error1 as Boolean, error2 as Boolean) as Integer
    Try
        If (error1) Then Error 400, ""You wanted an outer error""
        Print ""Outer success""
        Return 1
    Catch
        Print ""Error "" & Error() & "" on line "" & Erl()
        Try
            If (error2) Then Error 401, ""You wanted an inner error""
            Print ""Inner success""
            Return 2
        Catch
            Print ""Error "" & Error() & "" on line "" & Erl()
            Return 3
        End Try
    End Try
End Function
"
https://help.hcltechsw.com/docs/voltscript/early-access/howto/language/conditionals.html,"Function orSuccess as String
    Dim obj as Student
    If (obj is Nothing || obj.Name != """") Then
        Print ""Student not initialized""
    End If
    Return ""Success""
End Function
"
https://help.hcltechsw.com/docs/voltscript/early-access/howto/language/conditionals.html,"Function andSuccess as String
    Dim obj as New Student
    If (obj.Name != """" && obj.Score > 90) Then
        Print ""High-score valid student""
    End If
    Return ""Success""
End Function
"
https://help.hcltechsw.com/docs/voltscript/early-access/howto/language/conditionals.html,"Sub Initialize

    Dim testRunner as New testRunner(""Language tests"")
    Dim result as Boolean

    result = errorTests(testRunner)
    result = result And logicalTests(testRunner)

    If result Then Print ""TESTS SUCCESSFUL"" Else Print ""TESTS UNSUCCESSFUL""

End Sub
"
loop.vss,"Dim my_array(0 To 3) As Variant
my_array(0) = ""first record""
my_array(1) = ""second record""
my_array(2) = ""third record""
Dim i as Integer
i = 0
While i < UBound(my_array)
    Print my_array(i)
    i++
Wend"
loop.vss,"Dim my_array(0 To 3) As Variant
my_array(0) = ""a""
my_array(1) = ""b""
my_array(2) = ""c""
Dim i as Integer
i = 0
While i < UBound(my_array)
    Print my_array(i)
    i++
Wend"
